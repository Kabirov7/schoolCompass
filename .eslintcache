[{"/Users/artur/Programming/workProjects/school_compass/src/index.js":"1","/Users/artur/Programming/workProjects/school_compass/src/reportWebVitals.js":"2","/Users/artur/Programming/workProjects/school_compass/src/App.js":"3","/Users/artur/Programming/workProjects/school_compass/src/Components/auth/Home.js":"4","/Users/artur/Programming/workProjects/school_compass/src/Components/auth/Result.js":"5","/Users/artur/Programming/workProjects/school_compass/src/Components/form/radiobutton.js":"6","/Users/artur/Programming/workProjects/school_compass/src/Components/form/TextField.js":"7","/Users/artur/Programming/workProjects/school_compass/src/Components/form/checkBox.js":"8","/Users/artur/Programming/workProjects/school_compass/src/Components/form/SelectBox.js":"9","/Users/artur/Programming/workProjects/school_compass/src/Components/Charts/Scatter.js":"10","/Users/artur/Programming/workProjects/school_compass/src/util/firebase.js":"11","/Users/artur/Programming/workProjects/school_compass/src/Components/shareBtn/facebookShare.js":"12","/Users/artur/Programming/workProjects/school_compass/src/Components/axisAverrage/ScatterLineResult.js":"13","/Users/artur/Programming/workProjects/school_compass/src/Components/axisAverrage/PrecentOfAnswered.js":"14"},{"size":500,"mtime":1611163113350,"results":"15","hashOfConfig":"16"},{"size":362,"mtime":1611163113350,"results":"17","hashOfConfig":"16"},{"size":563,"mtime":1611166504174,"results":"18","hashOfConfig":"16"},{"size":19243,"mtime":1611166098609,"results":"19","hashOfConfig":"16"},{"size":13841,"mtime":1602347946000,"results":"20","hashOfConfig":"16"},{"size":1145,"mtime":1601968890000,"results":"21","hashOfConfig":"16"},{"size":957,"mtime":1602347174000,"results":"22","hashOfConfig":"16"},{"size":740,"mtime":1601968890000,"results":"23","hashOfConfig":"16"},{"size":1681,"mtime":1601968890000,"results":"24","hashOfConfig":"16"},{"size":1497,"mtime":1601968890000,"results":"25","hashOfConfig":"16"},{"size":729,"mtime":1601983790000,"results":"26","hashOfConfig":"16"},{"size":1656,"mtime":1601983748000,"results":"27","hashOfConfig":"16"},{"size":2593,"mtime":1601968890000,"results":"28","hashOfConfig":"16"},{"size":476,"mtime":1601968890000,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"2w2lki",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":38,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"32"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"32"},"/Users/artur/Programming/workProjects/school_compass/src/index.js",[],["68","69"],"/Users/artur/Programming/workProjects/school_compass/src/reportWebVitals.js",[],"/Users/artur/Programming/workProjects/school_compass/src/App.js",["70","71","72","73"],"import React, {useEffect, Component} from 'react';\r\nimport './App.css';\r\n\r\nimport {\r\n\tBrowserRouter as Router,\r\n\tRoute,\r\n} from \"react-router-dom\";\r\n\r\nimport Home from \"./Components/auth/Home\";\r\nimport Result from \"./Components/auth/Result\";\r\nimport ReactGa from \"react-ga\"\r\n\r\nfunction App(){\r\n\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t\t<Router>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<Route exact path={\"/school_compass/\"} component={Home}/>\r\n\t\t\t\t\t\t\t{/*<Route exact path={\"/school_compass/myRes\"} component={Result}/>*/}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</Router>\r\n\t\t\t</div>\r\n\t\t)\r\n\r\n}\r\n\r\nexport default App;","/Users/artur/Programming/workProjects/school_compass/src/Components/auth/Home.js",["74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111"],"import React, {Component, useEffect, useState} from \"react\";\r\nimport '../../App.css'\r\nimport RadioButton from \"../form/radiobutton\";\r\nimport CheckBox from \"../form/checkBox\";\r\nimport SelectBox from \"../form/SelectBox\";\r\nimport Scatter from \"../Charts/Scatter\";\r\nimport firebase from \"../../util/firebase\";\r\nimport FacebookShareBtn from \"../shareBtn/facebookShare\";\r\nimport app, {signInWithGoogle, signInAnonymously} from \"../../util/firebase\";\r\nimport ScatterLine from \"../axisAverrage/ScatterLineResult\";\r\nimport PrecentOfAnswered from \"../axisAverrage/PrecentOfAnswered\";\r\n\r\nlet distance = require('euclidean-distance')\r\n\r\n\r\nconst queryString = require('query-string')\r\n\r\nclass Home extends Component {\r\n\tstate = {\r\n\t\tquestions: [],\r\n\t\tmain_title: '',\r\n\t\tgateway: '',\r\n\t\tanswers: {},\r\n\t\tnotAnswered: [],\r\n\t\taxises: {},\r\n\t\taxis_points: [],\r\n\t\ttotal_axis: [],\r\n\t\taxis_title_values: [],\r\n\t\taxis_values: [],\r\n\t\tposition: {},\r\n\t\taxis: [],\r\n\t\taxis_title: [],\r\n\t\taxises_object: [],\r\n\t\taxis_names: {},\r\n\t\tall_axis: {},\r\n\t\tanswer_title_values: [],\r\n\t\tanswer_values: [\"da\"],\r\n\t\tanswer_values_males: [],\r\n\t\tcount_axises: [],\r\n\t\tcompass_compare: {},\r\n\t\tdefault_axises: [],\r\n\t\tall_axis_averrage: [],\r\n\t\tbatch_axises: [],\r\n\t\tonlyTwoCheckBox: true,\r\n\t\tshowAnswers: false,\r\n\t\tquestions_on_page: 0,\r\n\t\tfirst_questions: 0,\r\n\t\tpartyColor: [],\r\n\t\tanket: false,\r\n\t\tanket_all_answers: 1,\r\n\t\tanketa_questions: [],\r\n\t\tanket_answers: [],\r\n\t\taxis_legends: [],\r\n\t\tlegendary: [],\r\n\t\tnearestTeacher: {},\r\n\t\tcompass_url: \"\",\r\n\t\tsaveData: false,\r\n\t\tuid: false,\r\n\t\tuser: false,\r\n\t\taxisNearest: [],\r\n\t\tcurrentUser: {}\r\n\t}\r\n\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.downloadData()\r\n\t}\r\n\r\n\tdownloadData = () => {\r\n\t\tlet urlString = queryString.parse(window.location.search, {decode: false})\r\n\t\tconsole.log(urlString)\r\n\t\tif (true) {\r\n\t\t\t// fetch('https://raw.githubusercontent.com/Kabirov7/schoolCompass_json/main/config_schoolCompass_test.json')\r\n\t\t\tfetch('https://raw.githubusercontent.com/Kabirov7/schoolCompass_json/main/config_schoolCompass.json')\r\n\t\t\t\t// if (urlString.url) {\r\n\t\t\t\t// \tfetch(urlString.url)\r\n\t\t\t\t.then((response) => {\r\n\t\t\t\t\tconsole.log(\"RESPONSE\", response)\r\n\t\t\t\t\treturn response.json();\r\n\t\t\t\t})\r\n\t\t\t\t.then((data) => {\r\n\t\t\t\t\tconsole.log(\"DATA\", data);\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\tquestions: data.questions,\r\n\t\t\t\t\t\tmain_title: data.main_title,\r\n\t\t\t\t\t\tgateway: data.gateway,\r\n\t\t\t\t\t\tcompass_compare: data.compass_compare,\r\n\t\t\t\t\t\taxis: data.axises,\r\n\t\t\t\t\t\taxis_title: data.axis_title,\r\n\t\t\t\t\t\taxis_title_values: data.axis_title_values,\r\n\t\t\t\t\t\taxis_values: data.axis_values,\r\n\t\t\t\t\t\tanswer_title_values: data.answer_title_values,\r\n\t\t\t\t\t\tanswer_values_males: data.answer_values,\r\n\t\t\t\t\t\taxises_object: data.axises_object,\r\n\t\t\t\t\t\tquestions_on_page: data.questions_on_page,\r\n\t\t\t\t\t\taxis_points: data.axis_points,\r\n\t\t\t\t\t\tpartyColor: data.partyColor,\r\n\t\t\t\t\t\tanketa_questions: data.anket,\r\n\t\t\t\t\t\taxis_legends: data.axis_legends,\r\n\t\t\t\t\t\tcompass_url: data.compass_url,\r\n\t\t\t\t\t\taxisNearest: data.axisNearest,\r\n\t\t\t\t\t})\r\n\t\t\t\t});\r\n\t\t} else {\r\n\t\t\tconsole.log(\"ERROR: no url detected\")\r\n\t\t}\r\n\t}\r\n\r\n\tgetNotAnswered = (state, pl) => {\r\n\r\n\t\tfunction elToIntArr(array) {\r\n\t\t\tarray.forEach((i, index) => {\r\n\t\t\t\tarray[index] = Number(array[index])\r\n\t\t\t})\r\n\t\t\treturn array\r\n\t\t}\r\n\r\n\t\tlet currentQset;\r\n\t\tif (pl == \"plus\") {\r\n\t\t\tcurrentQset = this.state.questions.slice(this.state.first_questions, this.state.first_questions + this.state.questions_on_page);\r\n\t\t} else if (pl == 'minus') {\r\n\t\t\tcurrentQset = this.state.questions.slice(this.state.first_questions, this.state.first_questions - this.state.questions_on_page);\r\n\t\t}\r\n\r\n\r\n\t\tlet idxsOfAnswered = elToIntArr(Object.keys(state.answers))\r\n\t\tcurrentQset = elToIntArr(Object.keys(currentQset))\r\n\r\n\t\tlet whichNotAnswered = currentQset.filter((i) => idxsOfAnswered.indexOf(this.state.first_questions + i) == -1);\r\n\r\n\t\treturn whichNotAnswered\r\n\t}\r\n\r\n\treturnAnswer = (answer, index) => {\r\n\t\tlet answers = {...this.state.answers}\r\n\t\tanswers[index] = answer\r\n\t\tthis.setState({answers: answers})\r\n\t}\r\n\r\n\treturnAnketsAnswer = (answer, index) => {\r\n\t\tlet answers = {...this.state.anket_answers}\r\n\t\tanswers[index] = answer\r\n\t\tthis.setState({anket_answers: answers})\r\n\t}\r\n\r\n\treturnAxisName = (axis_name, index) => {\r\n\t\tlet axises = {...this.state.axis_names}\r\n\t\taxises[index] = axis_name\r\n\t\tthis.setState({axis_names: axises})\r\n\t}\r\n\r\n\tgetAxisMainTemplate = (state) => {\r\n\t\tlet mainTemplate;\r\n\t\tfor (let i = 0; i < state.axises_object.length + 1; i++) {\r\n\t\t\tmainTemplate = Object.assign({}, state.axises_object[i], state.axises_object[i + 1], mainTemplate)\r\n\t\t}\r\n\t\treturn mainTemplate;\r\n\t}\r\n\r\n\tgetAxisTemplate = (state) => {\r\n\t\tlet axis_names = [];\r\n\t\tlet axis, axis_index, axis_object;\r\n\t\tlet all_axis;\r\n\t\tlet template = Object.entries(state.axis_names).map((item) => {\r\n\t\t\taxis = item[1]\r\n\t\t\taxis_index = item[0]\r\n\t\t\taxis_object = state.axises_object[axis_index]\r\n\t\t\tif (axis) {\r\n\t\t\t\taxis_names.push(axis_object)\r\n\t\t\t\treturn axis_object\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\ttemplate = template.filter(item => item !== undefined)\r\n\t\ttemplate = template.reverse()\r\n\t\tfor (let i = 0; i < template.length + 1; i++) {\r\n\t\t\tif (i != template.length) {\r\n\t\t\t\tall_axis = Object.assign({}, template[i], template[i + 1], all_axis)\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn all_axis;\r\n\t\tthis.setState({all_axis: all_axis})\r\n\t}\r\n\r\n\treturnAxis = (axis) => {\r\n\t\tlet axises = {...this.state.axises}\r\n\t\taxises = axis\r\n\t\tthis.setState({axises: axises})\r\n\t}\r\n\r\n\tgetAxis = (state) => {\r\n\t\tlet state_answers = Object.entries(state.answers);\r\n\r\n\t\tlet axises_names = [];\r\n\t\tlet axis_count = {};\r\n\t\tlet answer, index_question;\r\n\r\n\t\tlet axs = state_answers.map((item, index, array) => {\r\n\t\t\tindex_question = item[0]\r\n\t\t\tanswer = item[1]\r\n\t\t\tlet answer_type = state.questions[index_question].answer;\r\n\t\t\tlet answer_type_index = state.answer_title_values.indexOf(answer_type)\r\n\t\t\tlet answers_item = state.answer_values_males[answer_type_index][state.anket_answers[0]]\r\n\t\t\tlet answer_index = answers_item.indexOf(answer)\r\n\r\n\t\t\tlet axis_type = state.questions[index_question].axis;\r\n\t\t\tlet axis_type_index = state.axis_title_values.indexOf(axis_type)\r\n\t\t\tlet axis_array = state.axis_values[axis_type_index]\r\n\t\t\tlet axis_is = axis_array[answer_index]\r\n\r\n\t\t\tObject.keys(axis_is).forEach((i) => {\r\n\t\t\t\taxises_names.push(i)\r\n\t\t\t})\r\n\r\n\t\t\treturn axis_is;\r\n\t\t})\r\n\t\taxises_names = axises_names.sort()\r\n\t\tlet unique_axis = [...new Set(axises_names)];\r\n\t\tunique_axis.forEach((item, index) => {\r\n\t\t\tlet difference = (axises_names.lastIndexOf(item) + 1) - axises_names.indexOf(item)\r\n\t\t\taxis_count[item] = difference\r\n\t\t})\r\n\r\n\t\tthis.returnAxis(axs);\r\n\t\tthis.getAxisAverage(axs, axis_count);\r\n\t};\r\n\r\n\tgetAxisAverage = (axs, axis_count) => {\r\n\t\tconst sum = this.getAxisTemplate(this.state)\r\n\t\tconst mainTemplate = this.getAxisMainTemplate(this.state)\r\n\r\n\t\tObject.values(axs).forEach(el => {\r\n\t\t\tObject.keys(el).forEach(key => {\r\n\r\n\t\t\t\tmainTemplate[key] += el[key]\r\n\t\t\t\tif (sum != undefined) {\r\n\t\t\t\t\tif (sum[key] !== undefined) {\r\n\t\t\t\t\t\tsum[key] += el[key]\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t})\r\n\r\n\r\n\t\tObject.keys(axis_count).forEach(key => {\r\n\t\t\tmainTemplate[key] = mainTemplate[key] / axis_count[key]\r\n\t\t})\r\n\r\n\t\tif (sum != undefined) {\r\n\t\t\tObject.keys(sum).forEach(key => {\r\n\t\t\t\tif (axis_count[key] !== undefined) {\r\n\t\t\t\t\tsum[key] = sum[key] / axis_count[key]\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tthis.setState({all_axis_averrage: Object.values(mainTemplate).reverse()})\r\n\t\tif (sum != undefined) {\r\n\t\t\tthis.distanceEuclid(sum)\r\n\t\t}\r\n\t}\r\n\r\n\tdistanceEuclid = (axises_object) => {\r\n\t\tlet distanceIs;\r\n\t\tlet minDistance = Infinity;\r\n\t\tlet axises = [];\r\n\t\tconst minDistances = [];\r\n\r\n\t\tlet positionInfo = {\r\n\t\t\tdistance: Infinity,\r\n\t\t\ttitle: Infinity,\r\n\t\t}\r\n\r\n\t\tlet axises_object_keys = Object.keys(axises_object);//keys of choosen axises\r\n\t\tlet axises_object_values = Object.values(axises_object);// values of choosen axises\r\n\t\tconst axises_idx = [];\r\n\r\n\r\n\t\tlet default_axises = [];\r\n\t\twhile (default_axises.length < this.state.compass_compare.axises.length) {\r\n\t\t\tdefault_axises.push([])\r\n\t\t}\r\n\r\n\t\taxises_object_keys.forEach((el, i) => {\r\n\t\t\taxises[i] = axises_object_values[i]\r\n\t\t\taxises_idx[i] = this.state.axis.indexOf(el)\r\n\t\t})\r\n\r\n\t\tthis.state.compass_compare.axises.map((item, item_index) => {\r\n\t\t\tlet default_axis = []\r\n\t\t\twhile (default_axis.length < axises_idx.length) {\r\n\t\t\t\tdefault_axis.push(0)\r\n\t\t\t}\r\n\t\t\taxises_idx.forEach((axis_idx, idx) => {\r\n\t\t\t\tdefault_axis[idx] = item[axis_idx]\r\n\t\t\t})\r\n\r\n\t\t\tdefault_axises[item_index] = default_axis\r\n\t\t})\r\n\r\n\t\tthis.setState({batch_axises: default_axises})\r\n\t\tthis.setState({total_axis: axises})\r\n\t\tif (axises.length != [0].length) {\r\n\t\t\tdefault_axises.forEach((item, index, array) => {\r\n\t\t\t\tdistanceIs = distance(axises, item);\r\n\t\t\t\tif (distanceIs < minDistance) {\r\n\t\t\t\t\tminDistance = distanceIs;\r\n\r\n\t\t\t\t\tpositionInfo = {\r\n\t\t\t\t\t\tdistance: minDistance,\r\n\t\t\t\t\t\ttitle: this.state.compass_compare.position[index],\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tthis.setState({position: positionInfo})\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\tlegendByAxis = () => {\r\n\t\tlet legendsByAxis = []\r\n\t\tlet legendIs = this.state.axis_legends.map((el, i) => {\r\n\t\t\tlet itIs;\r\n\r\n\t\t\tlet legends = Object.values(el)\r\n\t\t\tlet indexAxisByName = this.state.axis_title.indexOf(el.name)\r\n\t\t\tlet axis = this.state.all_axis_averrage[indexAxisByName]\r\n\t\t\tif (-2 <= axis && axis < -1.11) {\r\n\t\t\t\titIs = 1\r\n\r\n\t\t\t} else if (-1.10 < axis && axis < -0.61) {\r\n\t\t\t\titIs = 2\r\n\r\n\t\t\t} else if (-0.60 < axis && axis < -0.21) {\r\n\t\t\t\titIs = 3\r\n\r\n\t\t\t} else if (-0.20 < axis && axis < 0.20) {\r\n\t\t\t\titIs = 4\r\n\r\n\t\t\t} else if (0.21 < axis && axis < 0.60) {\r\n\t\t\t\titIs = 5\r\n\r\n\t\t\t} else if (-0.61 < axis && axis < 1.10) {\r\n\t\t\t\titIs = 6\r\n\r\n\t\t\t} else if (-1.11 < axis && axis <= 2.00) {\r\n\t\t\t\titIs = 7\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlegendsByAxis[i] = itIs\r\n\t\t\treturn (<div className={\"legend\"}>\r\n\t\t\t\t<h5>{el.name}:</h5>\r\n\t\t\t\t<p>{legends[itIs]}</p>\r\n\t\t\t</div>)\r\n\t\t})\r\n\r\n\t\tif (this.state.legendary.length == [].length) {\r\n\t\t\tthis.setState({legendary: legendsByAxis})\r\n\t\t}\r\n\t\treturn legendIs\r\n\t}\r\n\r\n\tsaving_data = (state) => {\r\n\t\tconst answ = state.answer_values_males[0][state.anket_answers[0]]\r\n\r\n\t\tlet answers = Object.values(state.answers).map((el, i) => {\r\n\t\t\tlet answerIdx = answ.indexOf(el)\r\n\t\t\treturn {[i]: answerIdx}\r\n\t\t})\r\n\r\n\t\tconst db = firebase.firestore().collection(\"users_answers\")\r\n\t\tlet uid;\r\n\t\tlet user = firebase.auth().currentUser\r\n\t\tconsole.log(user)\r\n\t\tif (this.state.saveData == false) {\r\n\r\n\t\t\tfirebase.auth().onAuthStateChanged(function (user) {\r\n\t\t\t\tif (user != null) {\r\n\t\t\t\t\tuid = user.uid\r\n\t\t\t\t\tdb.doc(uid).collection('answers').doc().set({\r\n\t\t\t\t\t\tmale: state.anket_answers[0],\r\n\t\t\t\t\t\tgrade: state.anket_answers[1],\r\n\t\t\t\t\t\tanswers: answers,\r\n\t\t\t\t\t\taxises_averrage: state.all_axis_averrage,\r\n\t\t\t\t\t\taxises: state.axises,\r\n\t\t\t\t\t}).then(console.log('save'))\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t});\r\n\t\t\tthis.setState({saveData: true})\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\trender() {\r\n\r\n\t\tlet anket = this.state.anketa_questions.map((el, i) => {\r\n\t\t\treturn <SelectBox key={i} index={i} title={el.title} answers={el.answer}\r\n\t\t\t\t\t\t\t\t\t\t\t\treturnAnketsAnswer={this.returnAnketsAnswer}/>\r\n\t\t})\r\n\r\n\t\tlet doneAnket = () => {\r\n\t\t\tif (Object.keys(this.state.anket_answers).length == this.state.anketa_questions.length) {\r\n\t\t\t\ttopFunction();\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tanket_all_answers: true,\r\n\t\t\t\t\tanket: true\r\n\t\t\t\t})\r\n\t\t\t} else {\r\n\t\t\t\tthis.setState({anket_all_answers: false})\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tlet qSet = this.state.questions.slice(this.state.first_questions, this.state.first_questions + this.state.questions_on_page)\r\n\t\tlet questionList = qSet.map((el, i) => {\r\n\t\t\tlet message;\r\n\t\t\tif (el.type === 'select') {\r\n\t\t\t\tif (this.state.notAnswered.indexOf(i) != -1) {\r\n\t\t\t\t\tmessage = 'Вам следует ответить на этот вопрос'\r\n\t\t\t\t} else {\r\n\t\t\t\t\tmessage = ''\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet type_answers = el.answer;\r\n\t\t\t\tlet title_values = this.state.answer_title_values;\r\n\t\t\t\tlet index_type = title_values.indexOf(type_answers);\r\n\t\t\t\tlet answer = this.state.answer_values_males[index_type][this.state.anket_answers[0]]\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<RadioButton ans={this.state.answers[this.state.first_questions + i]}\r\n\t\t\t\t\t\t\t\t\t\t\t key={this.state.first_questions + i} id={i} index={this.state.first_questions + i}\r\n\t\t\t\t\t\t\t\t\t\t\t title={el.title}\r\n\t\t\t\t\t\t\t\t\t\t\t message={message} answers={answer} returnAnswer={this.returnAnswer}/>\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t})\r\n\t\t\r\n\r\n\t\tlet axisAverrage = this.state.axis_title.map((el, i) => {\r\n\t\t\treturn (<ScatterLine index={i}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t axisName={el}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t names={this.state.compass_compare.position}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t partyAxises={this.state.compass_compare.axises}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t partyColor={this.state.partyColor}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t axisNearest={this.state.axisNearest[i]}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t axisAverrage={this.state.all_axis_averrage[i]}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t axisPoints={this.state.axis_points[i]}\r\n\t\t\t\t/>\r\n\t\t\t)\r\n\t\t})\r\n\r\n\t\tlet checkbox = this.state.axis.map((el, i) => {\r\n\t\t\treturn (\r\n\t\t\t\t<CheckBox key={i} index={i} name={el} title={this.state.axis_title[i]} returnAxisName={this.returnAxisName}/>\r\n\t\t\t)\r\n\r\n\t\t})\r\n\r\n\t\tlet chart = () => {\r\n\t\t\tif (this.state.axises != {}) {\r\n\t\t\t\tlet axisesNames = this.state.axis_names\r\n\r\n\t\t\t\tObject.keys(axisesNames).forEach(function (key) {\r\n\t\t\t\t\tif (axisesNames[key] == false)\r\n\t\t\t\t\t\tdelete axisesNames[key];\r\n\t\t\t\t});\r\n\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<Scatter partyColor={this.state.partyColor} myAxis={this.state.total_axis}\r\n\t\t\t\t\t\t\t\t\t\t\t names={this.state.compass_compare.position}\r\n\t\t\t\t\t\t\t\t\t\t\t axises={this.state.batch_axises}/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<p className={'scatter'}>Ось X — {this.state.axis_title[Object.keys(axisesNames)[0]]}</p>\r\n\t\t\t\t\t\t<p className={'scatter'}>Ось Y — {this.state.axis_title[Object.keys(axisesNames)[1]]}</p>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t)\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet resultTeacher = () => {\r\n\t\t\tlet distanceIs;\r\n\t\t\tlet names = this.state.compass_compare.position\r\n\t\t\tlet minIs = {\r\n\t\t\t\tidx: \"\",\r\n\t\t\t\tname: \"\",\r\n\t\t\t\tdistance: Infinity\r\n\t\t\t}\r\n\t\t\tthis.state.compass_compare.axises.map((el, i) => {\r\n\t\t\t\tdistanceIs = distance(this.state.all_axis_averrage, el)\r\n\t\t\t\tif (distanceIs < minIs.distance) {\r\n\t\t\t\t\tminIs.idx = i\r\n\t\t\t\t\tminIs.name = names[i]\r\n\t\t\t\t\tminIs.distance = distanceIs\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\tif (Object.values(this.state.nearestTeacher).length == Object.values({}).length) {\r\n\t\t\t\tthis.setState({nearestTeacher: minIs})\r\n\t\t\t}\r\n\t\t\treturn (<div>\r\n\t\t\t\t<div className={\"resultTeacher\"}>\r\n\t\t\t\t\t<h3>Ближайший вам учитель:</h3>\r\n\t\t\t\t\t<h3>«{minIs.name}»</h3>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div className={\"resultTeacher\"}>\r\n\t\t\t\t\t<h3>Ваш автопортрет на основе ответов:</h3>\r\n\t\t\t\t\t<div className={\"myLegends\"}>\r\n\t\t\t\t\t\t{this.legendByAxis()}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div className={\"facebookBtn\"}>\r\n\t\t\t\t\t<h4 style={{textAlign: \"center\"}}>Поделиться результатами в социальных сетях</h4>\r\n\t\t\t\t\t<FacebookShareBtn\r\n\t\t\t\t\t\tclassName={'fb'}\r\n\t\t\t\t\t\tlegends={this.state.axis_legends}\r\n\t\t\t\t\t\tindexLegends={this.state.legendary}\r\n\t\t\t\t\t\tcompass_url={this.state.compass_url}\r\n\t\t\t\t\t\tnearestTeacher={this.state.nearestTeacher.name}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t</div>)\r\n\t\t}\r\n\r\n\t\tlet topFunction = () => {\r\n\t\t\tdocument.body.scrollTop = 0;\r\n\t\t\tdocument.documentElement.scrollTop = 0;\r\n\t\t}\r\n\r\n\t\tlet nextAndScrollTop = () => {\r\n\t\t\tlet whichNotAnswered = this.getNotAnswered(this.state, \"plus\");\r\n\t\t\tif (whichNotAnswered.length == 0) {\r\n\t\t\t\tthis.getAxis(this.state)\r\n\t\t\t\tthis.setState({first_questions: this.state.first_questions + this.state.questions_on_page});\r\n\t\t\t\tthis.setState({notAnswered: []})\r\n\t\t\t\ttopFunction();\r\n\t\t\t} else {\r\n\t\t\t\tthis.setState({notAnswered: whichNotAnswered})\r\n\t\t\t\tconst el = document.getElementById(`${whichNotAnswered[0]}`)\r\n\t\t\t\tel.scrollIntoView({\r\n\t\t\t\t\tbehavior: \"smooth\",\r\n\t\t\t\t\tblock: \"start\"\r\n\t\t\t\t})\r\n\t\t\t}\r\n\r\n\t\t\tif (Object.values(this.state.answers).length == Object.values(this.state.questions).length && Object.values(this.state.answers).length != Object.values({}).length && this.state.all_axis_averrage != []) {\r\n\t\t\t\tthis.saving_data(this.state)\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tlet previousAndScrollTop = () => {\r\n\t\t\tlet whichNotAnswered = this.getNotAnswered(this.state, \"minus\");\r\n\r\n\t\t\tif (whichNotAnswered.length == 0) {\r\n\t\t\t\tthis.getAxis(this.state)\r\n\t\t\t\tthis.setState({first_questions: this.state.first_questions - this.state.questions_on_page});\r\n\t\t\t\tthis.setState({notAnswered: []})\r\n\t\t\t\ttopFunction();\r\n\t\t\t} else {\r\n\t\t\t\tthis.setState({notAnswered: whichNotAnswered})\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet onlyTwoCheckbox = () => {\r\n\t\t\tlet values = Object.values(this.state.axis_names)\r\n\t\t\tconst countTrue = values.filter(el => el == true)\r\n\t\t\tif (countTrue.length == 2) {\r\n\t\t\t\tthis.setState({onlyTwoCheckBox: true})\r\n\t\t\t\tthis.getAxis(this.state)\r\n\t\t\t} else {\r\n\t\t\t\tthis.setState({onlyTwoCheckBox: false})\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst forms = () => {\r\n\t\t\tif (this.state.anket == false) {\r\n\t\t\t\tlet answers = (this.state.anket_all_answers == false) ? \"Вам следует ответить на все вопросы\" : \"\"\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<div style={{textAlign: \"center\"}}>\r\n\t\t\t\t\t\t<p className={\"chooseAnswer padding_margin\"}>{answers}</p>\r\n\t\t\t\t\t\t{anket}\r\n\t\t\t\t\t\t<div className={\"buttons\"}>\r\n\t\t\t\t\t\t\t<button onClick={() => doneAnket()}>Начать</button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)\r\n\t\t\t} else if (this.state.questions.length <= this.state.first_questions && this.state.anket == true) {\r\n\t\t\t\tlet result = this.state.onlyTwoCheckBox ? \"\" : \"Выберите только две темы\";\r\n\t\t\t\tlet d = (this.state.compass_compare.axises != undefined) ? resultTeacher() : \"\";\r\n\t\t\t\treturn (<div>\r\n\t\t\t\t\t{d}\r\n\t\t\t\t\t<h2 className=\"content-center full-result\">Развёрнутые результаты:</h2>\r\n\t\t\t\t\t{axisAverrage}\r\n\t\t\t\t\t<h1 className=\"content-center moreResult\">Поиграйтесь с результатами! Выведите их на график!</h1>\r\n\t\t\t\t\t<h2 className=\"content-center choose3axis\">Выберите два явления, которые вы хотите отобразить:</h2>\r\n\t\t\t\t\t<p className=\"chooseAnswer padding_margin\">{result}</p>\r\n\t\t\t\t\t<div className=\"choose_axises\">\r\n\t\t\t\t\t\t{checkbox}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div style={{textAlign: \"center\"}}>\r\n\t\t\t\t\t\t<button onClick={() => onlyTwoCheckbox()}>Показать результаты</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t{chart()}\r\n\t\t\t\t\t<div className={'result-position'}>\r\n\t\t\t\t\t\t<h3>Ближайший вам учитель по выбранным осям:</h3>\r\n\t\t\t\t\t\t<h2>{this.state.position.title}</h2>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>)\r\n\t\t\t} else {\r\n\t\t\t\tlet previousPageShowing = (this.state.first_questions == 0) ?\r\n\t\t\t\t\t<button style={{display: \"none\"}}>Предыдущая страница</button> :\r\n\t\t\t\t\t<button onClick={previousAndScrollTop}>Предыдущая страница</button>\r\n\t\t\t\treturn (<div>\r\n\t\t\t\t\t<PrecentOfAnswered lenQuestions={this.state.questions.length} currentQuestions={this.state.first_questions}/>\r\n\t\t\t\t\t{questionList}\r\n\t\t\t\t\t<div className=\"pagination\">\r\n\t\t\t\t\t\t{previousPageShowing}\r\n\t\t\t\t\t\t<button onClick={nextAndScrollTop}>Следующая страница</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"App\">\r\n\t\t\t\t<button onClick={() => console.log(this.state)}>show state</button>\r\n\t\t\t\t<button onClick={() => console.log(firebase.auth().signOut())}>signout</button>\r\n\t\t\t\t{forms()}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n\r\nexport default Home;\r\n","/Users/artur/Programming/workProjects/school_compass/src/Components/auth/Result.js",["112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137"],"import React, {Component, useEffect, useState} from \"react\";\r\nimport '../../App.css'\r\nimport CheckBox from \"../form/checkBox\";\r\nimport Scatter from \"../Charts/Scatter\";\r\nimport firebase from \"../../util/firebase\";\r\nimport FacebookShareBtn from \"../shareBtn/facebookShare\";\r\nimport ScatterLine from \"../axisAverrage/ScatterLineResult\";\r\nimport BasicTextFields from \"../form/TextField\";\r\n\r\nlet distance = require('euclidean-distance')\r\n\r\n\r\nconst queryString = require('query-string')\r\n\r\nclass Result extends Component {\r\n\tstate = {\r\n\t\tquestions: [],\r\n\t\tmain_title: '',\r\n\t\tgateway: '',\r\n\t\tanswers: [],\r\n\t\tnotAnswered: [],\r\n\t\taxises: {},\r\n\t\taxis_points: [],\r\n\t\ttotal_axis: [],\r\n\t\taxis_title_values: [],\r\n\t\tposition: {},\r\n\t\taxis: [],\r\n\t\taxis_title: [],\r\n\t\taxis_names: {},\r\n\t\tall_axis: {},\r\n\t\tanswer_title_values: [],\r\n\t\tanswer_values: [\"da\"],\r\n\t\tanswer_values_males: [],\r\n\t\tcount_axises: [],\r\n\t\tcompass_compare: {},\r\n\t\tdefault_axises: [],\r\n\t\tall_axis_averrage: [],\r\n\t\tbatch_axises: [],\r\n\t\tonlyTwoCheckBox: true,\r\n\t\tshowAnswers: false,\r\n\t\tpartyColor: [],\r\n\t\tanket: false,\r\n\t\tanket_all_answers: 1,\r\n\t\tanket_answers: [],\r\n\t\taxis_legends: [],\r\n\t\tlegendary: [],\r\n\t\tnearestParty: {},\r\n\t\tcompass_url: \"\",\r\n\t\taxisNearest: [],\r\n\t\tuserUid: '',\r\n\t\ttrueUid: false\r\n\r\n\t}\r\n\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.downloadData()\r\n\t}\r\n\r\n\tdownloadData = () => {\r\n\t\tlet urlString = queryString.parse(window.location.search, {decode: false})\r\n\t\tconsole.log(urlString)\r\n\t\tif (true) {\r\n\t\t\tfetch('https://raw.githubusercontent.com/Kabirov7/schoolCompass_json/main/config_schoolCompass_test.json')\r\n\t\t\t\t// fetch('https://raw.githubusercontent.com/Kabirov7/schoolCompass_json/main/config_schoolCompass.json')\r\n\t\t\t\t// if (urlString.url) {\r\n\t\t\t\t// \tfetch(urlString.url)\r\n\t\t\t\t.then((response) => {\r\n\t\t\t\t\tconsole.log(\"RESPONSE\", response)\r\n\t\t\t\t\treturn response.json();\r\n\t\t\t\t})\r\n\t\t\t\t.then((data) => {\r\n\t\t\t\t\tconsole.log(\"DATA\", data);\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\tmain_title: data.main_title,\r\n\t\t\t\t\t\tgateway: data.gateway,\r\n\t\t\t\t\t\tcompass_compare: data.compass_compare,\r\n\t\t\t\t\t\taxis: data.axises,\r\n\t\t\t\t\t\taxis_title: data.axis_title,\r\n\t\t\t\t\t\taxis_title_values: data.axis_title_values,\r\n\t\t\t\t\t\tanswer_title_values: data.answer_title_values,\r\n\t\t\t\t\t\tanswer_values_males: data.answer_values,\r\n\t\t\t\t\t\taxis_points: data.axis_points,\r\n\t\t\t\t\t\tpartyColor: data.partyColor,\r\n\t\t\t\t\t\taxis_legends: data.axis_legends,\r\n\t\t\t\t\t\tcompass_url: data.compass_url,\r\n\t\t\t\t\t\taxisNearest: data.axisNearest,\r\n\t\t\t\t\t})\r\n\t\t\t\t});\r\n\t\t} else {\r\n\t\t\tconsole.log(\"ERROR: no url detected\")\r\n\t\t}\r\n\t}\r\n\r\n\treturnAnswer = (answer, index) => {\r\n\t\tthis.setState({userUid: answer})\r\n\t}\r\n\r\n\tget_data = (state) => {\r\n\t\tconst uid = state.userUid\r\n\t\tconst answers = []\r\n\t\tlet db = firebase.firestore()\r\n\t\tlet rootRef = db.collection('users_answers')\r\n\t\trootRef.doc(uid).collection('answers').get()\r\n    .then(function(querySnapshot) {\r\n        querySnapshot.forEach(function(doc) {\r\n            answers.push(doc.data())\r\n        });\r\n        console.log(answers)\r\n    })\r\n\t\tthis.setState({answers:answers})\r\n\t}\r\n\r\n\treturnAxisName = (axis_name, index) => {\r\n\t\tlet axises = {...this.state.axis_names}\r\n\t\taxises[index] = axis_name\r\n\t\tthis.setState({axis_names: axises})\r\n\t}\r\n\r\n\tgetAxisMainTemplate = (state) => {\r\n\t\tlet mainTemplate;\r\n\t\tfor (let i = 0; i < state.axises_object.length + 1; i++) {\r\n\t\t\tmainTemplate = Object.assign({}, state.axises_object[i], state.axises_object[i + 1], mainTemplate)\r\n\t\t}\r\n\t\treturn mainTemplate;\r\n\t}\r\n\r\n\t\tgetAxisTemplate = (state) => {\r\n\t\tlet axis_names = [];\r\n\t\tlet axis, axis_index, axis_object;\r\n\t\tlet all_axis;\r\n\t\tlet template = Object.entries(state.axis_names).map((item) => {\r\n\t\t\taxis = item[1]\r\n\t\t\taxis_index = item[0]\r\n\t\t\taxis_object = state.axises_object[axis_index]\r\n\t\t\tif (axis) {\r\n\t\t\t\taxis_names.push(axis_object)\r\n\t\t\t\treturn axis_object\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\ttemplate = template.filter(item => item !== undefined)\r\n\t\ttemplate = template.reverse()\r\n\t\tfor (let i = 0; i < template.length + 1; i++) {\r\n\t\t\tif (i != template.length) {\r\n\t\t\t\tall_axis = Object.assign({}, template[i], template[i + 1], all_axis)\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn all_axis;\r\n\t\tthis.setState({all_axis: all_axis})\r\n\t}\r\n\r\n\t\tgetAxis = (state) => {\r\n\t\tlet state_answers = Object.entries(state.answers);\r\n\r\n\t\tlet axises_names = [];\r\n\t\tlet axis_count = {};\r\n\t\tlet answer, index_question;\r\n\r\n\t\tlet axs = state_answers.map((item, index, array) => {\r\n\t\t\tindex_question = item[0]\r\n\t\t\tanswer = item[1]\r\n\t\t\tlet answer_type = state.questions[index_question].answer;\r\n\t\t\tlet answer_type_index = state.answer_title_values.indexOf(answer_type)\r\n\t\t\tlet answers_item = state.answer_values_males[answer_type_index][state.anket_answers[0]]\r\n\t\t\tlet answer_index = answers_item.indexOf(answer)\r\n\r\n\t\t\tlet axis_type = state.questions[index_question].axis;\r\n\t\t\tlet axis_type_index = state.axis_title_values.indexOf(axis_type)\r\n\t\t\tlet axis_array = state.axis_values[axis_type_index]\r\n\t\t\tlet axis_is = axis_array[answer_index]\r\n\r\n\t\t\tObject.keys(axis_is).forEach((i) => {\r\n\t\t\t\taxises_names.push(i)\r\n\t\t\t})\r\n\r\n\t\t\treturn axis_is;\r\n\t\t})\r\n\t\taxises_names = axises_names.sort()\r\n\t\tlet unique_axis = [...new Set(axises_names)];\r\n\t\tunique_axis.forEach((item, index) => {\r\n\t\t\tlet difference = (axises_names.lastIndexOf(item) + 1) - axises_names.indexOf(item)\r\n\t\t\taxis_count[item] = difference\r\n\t\t})\r\n\r\n\t\tthis.returnAxis(axs);\r\n\t\tthis.getAxisAverage(axs, axis_count);\r\n\t};\r\n\r\n\t\tgetAxisAverage = (axs, axis_count) => {\r\n\t\tconst sum = this.getAxisTemplate(this.state)\r\n\t\tconst mainTemplate = this.getAxisMainTemplate(this.state)\r\n\r\n\t\tObject.values(axs).forEach(el => {\r\n\t\t\tObject.keys(el).forEach(key => {\r\n\r\n\t\t\t\tmainTemplate[key] += el[key]\r\n\t\t\t\tif (sum != undefined) {\r\n\t\t\t\t\tif (sum[key] !== undefined) {\r\n\t\t\t\t\t\tsum[key] += el[key]\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t})\r\n\r\n\r\n\t\tObject.keys(axis_count).forEach(key => {\r\n\t\t\tmainTemplate[key] = mainTemplate[key] / axis_count[key]\r\n\t\t})\r\n\r\n\t\tif (sum != undefined) {\r\n\t\t\tObject.keys(sum).forEach(key => {\r\n\t\t\t\tif (axis_count[key] !== undefined) {\r\n\t\t\t\t\tsum[key] = sum[key] / axis_count[key]\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tthis.setState({all_axis_averrage: Object.values(mainTemplate).reverse()})\r\n\t\tif (sum != undefined) {\r\n\t\t\tthis.distanceEuclid(sum)\r\n\t\t}\r\n\t}\r\n\r\n\t\tdistanceEuclid = (axises_object) => {\r\n\t\tlet distanceIs;\r\n\t\tlet minDistance = Infinity;\r\n\t\tlet axises = [];\r\n\t\tconst minDistances = [];\r\n\r\n\t\tlet positionInfo = {\r\n\t\t\tdistance: Infinity,\r\n\t\t\ttitle: Infinity,\r\n\t\t}\r\n\r\n\t\tlet axises_object_keys = Object.keys(axises_object);//keys of choosen axises\r\n\t\tlet axises_object_values = Object.values(axises_object);// values of choosen axises\r\n\t\tconst axises_idx = [];\r\n\r\n\r\n\t\tlet default_axises = [];\r\n\t\twhile (default_axises.length < this.state.compass_compare.axises.length) {\r\n\t\t\tdefault_axises.push([])\r\n\t\t}\r\n\r\n\t\taxises_object_keys.forEach((el, i) => {\r\n\t\t\taxises[i] = axises_object_values[i]\r\n\t\t\taxises_idx[i] = this.state.axis.indexOf(el)\r\n\t\t})\r\n\r\n\t\tthis.state.compass_compare.axises.map((item, item_index) => {\r\n\t\t\tlet default_axis = []\r\n\t\t\twhile (default_axis.length < axises_idx.length) {\r\n\t\t\t\tdefault_axis.push(0)\r\n\t\t\t}\r\n\t\t\taxises_idx.forEach((axis_idx, idx) => {\r\n\t\t\t\tdefault_axis[idx] = item[axis_idx]\r\n\t\t\t})\r\n\r\n\t\t\tdefault_axises[item_index] = default_axis\r\n\t\t})\r\n\r\n\t\tthis.setState({batch_axises: default_axises})\r\n\t\tthis.setState({total_axis: axises})\r\n\t\tif (axises.length != [0].length) {\r\n\t\t\tdefault_axises.forEach((item, index, array) => {\r\n\t\t\t\tdistanceIs = distance(axises, item);\r\n\t\t\t\tif (distanceIs < minDistance) {\r\n\t\t\t\t\tminDistance = distanceIs;\r\n\r\n\t\t\t\t\tpositionInfo = {\r\n\t\t\t\t\t\tdistance: minDistance,\r\n\t\t\t\t\t\ttitle: this.state.compass_compare.position[index],\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tthis.setState({position: positionInfo})\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\t\t\tlegendByAxis = () => {\r\n\t\tlet legendsByAxis = []\r\n\t\tlet legendIs = this.state.axis_legends.map((el, i) => {\r\n\t\t\tlet itIs;\r\n\r\n\t\t\tlet legends = Object.values(el)\r\n\t\t\tlet indexAxisByName = this.state.axis_title.indexOf(el.name)\r\n\t\t\tlet axis = this.state.all_axis_averrage[indexAxisByName]\r\n\t\t\tif (-2 <= axis && axis < -1.11) {\r\n\t\t\t\titIs = 1\r\n\r\n\t\t\t} else if (-1.10 < axis && axis < -0.61) {\r\n\t\t\t\titIs = 2\r\n\r\n\t\t\t} else if (-0.60 < axis && axis < -0.21) {\r\n\t\t\t\titIs = 3\r\n\r\n\t\t\t} else if (-0.20 < axis && axis < 0.20) {\r\n\t\t\t\titIs = 4\r\n\r\n\t\t\t} else if (0.21 < axis && axis < 0.60) {\r\n\t\t\t\titIs = 5\r\n\r\n\t\t\t} else if (-0.61 < axis && axis < 1.10) {\r\n\t\t\t\titIs = 6\r\n\r\n\t\t\t} else if (-1.11 < axis && axis <= 2.00) {\r\n\t\t\t\titIs = 7\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlegendsByAxis[i] = itIs\r\n\t\t\treturn (<div className={\"legend\"}>\r\n\t\t\t\t<h5>{el.name}:</h5>\r\n\t\t\t\t<p>{legends[itIs]}</p>\r\n\t\t\t</div>)\r\n\t\t})\r\n\r\n\t\tif (this.state.legendary.length == [].length) {\r\n\t\t\tthis.setState({legendary: legendsByAxis})\r\n\t\t}\r\n\t\treturn legendIs\r\n\t}\r\n\r\n\r\n\trender() {\r\n\r\n\t\tlet axisAverrage = this.state.axis_title.map((el, i) => {\r\n\t\t\treturn (<ScatterLine index={i}\r\n\t\t\t                     axisName={el}\r\n\t\t\t                     names={this.state.compass_compare.position}\r\n\t\t\t                     partyAxises={this.state.compass_compare.axises}\r\n\t\t\t                     partyColor={this.state.partyColor}\r\n\t\t\t                     axisNearest={this.state.axisNearest[i]}\r\n\t\t\t                     axisAverrage={this.state.all_axis_averrage[i]}\r\n\t\t\t                     axisPoints={this.state.axis_points[i]}\r\n\t\t\t\t/>\r\n\t\t\t)\r\n\t\t})\r\n\r\n\t\tlet checkbox = this.state.axis.map((el, i) => {\r\n\t\t\treturn (\r\n\t\t\t\t<CheckBox key={i} index={i} name={el} title={this.state.axis_title[i]} returnAxisName={this.returnAxisName}/>\r\n\t\t\t)\r\n\r\n\t\t})\r\n\r\n\t\tlet chart = () => {\r\n\t\t\tif (this.state.axises != {}) {\r\n\t\t\t\tlet axisesNames = this.state.axis_names\r\n\r\n\t\t\t\tObject.keys(axisesNames).forEach(function (key) {\r\n\t\t\t\t\tif (axisesNames[key] == false)\r\n\t\t\t\t\t\tdelete axisesNames[key];\r\n\t\t\t\t});\r\n\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<Scatter partyColor={this.state.partyColor} myAxis={this.state.total_axis}\r\n\t\t\t\t\t\t\t         names={this.state.compass_compare.position}\r\n\t\t\t\t\t\t\t         axises={this.state.batch_axises}/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<p className={'scatter'}>Ось X — {this.state.axis_title[Object.keys(axisesNames)[0]]}</p>\r\n\t\t\t\t\t\t<p className={'scatter'}>Ось Y — {this.state.axis_title[Object.keys(axisesNames)[1]]}</p>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t)\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet resultParty = () => {\r\n\t\t\tlet distanceIs;\r\n\t\t\tlet names = this.state.compass_compare.position\r\n\t\t\tlet minIs = {\r\n\t\t\t\tidx: \"\",\r\n\t\t\t\tname: \"\",\r\n\t\t\t\tdistance: Infinity\r\n\t\t\t}\r\n\t\t\tthis.state.compass_compare.axises.map((el, i) => {\r\n\t\t\t\tdistanceIs = distance(this.state.all_axis_averrage, el)\r\n\t\t\t\tif (distanceIs < minIs.distance) {\r\n\t\t\t\t\tminIs.idx = i\r\n\t\t\t\t\tminIs.name = names[i]\r\n\t\t\t\t\tminIs.distance = distanceIs\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\tif (Object.values(this.state.nearestParty).length == Object.values({}).length) {\r\n\t\t\t\tthis.setState({nearestParty: minIs})\r\n\t\t\t}\r\n\t\t\treturn (<div>\r\n\t\t\t\t<div className={\"resultParty\"}>\r\n\t\t\t\t\t<h3>Ближайший вам учитель:</h3>\r\n\t\t\t\t\t<h3>«{minIs.name}»</h3>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div className={\"resultParty\"}>\r\n\t\t\t\t\t<h3>Ваш автопортрет на основе ответов:</h3>\r\n\t\t\t\t\t<div className={\"myLegends\"}>\r\n\t\t\t\t\t\t{this.legendByAxis()}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div className={\"facebookBtn\"}>\r\n\t\t\t\t\t<h4 style={{textAlign: \"center\"}}>Поделиться результатами в социальных сетях</h4>\r\n\t\t\t\t\t<FacebookShareBtn\r\n\t\t\t\t\t\tclassName={'fb'}\r\n\t\t\t\t\t\tlegends={this.state.axis_legends}\r\n\t\t\t\t\t\tindexLegends={this.state.legendary}\r\n\t\t\t\t\t\tcompass_url={this.state.compass_url}\r\n\t\t\t\t\t\tnearestParty={this.state.nearestParty.name}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t</div>)\r\n\t\t}\r\n\r\n\t\tlet topFunction = () => {\r\n\t\t\tdocument.body.scrollTop = 0;\r\n\t\t\tdocument.documentElement.scrollTop = 0;\r\n\t\t}\r\n\r\n\t\tlet onlyTwoCheckbox = () => {\r\n\t\t\tlet values = Object.values(this.state.axis_names)\r\n\t\t\tconst countTrue = values.filter(el => el == true)\r\n\t\t\tif (countTrue.length == 2) {\r\n\t\t\t\tthis.setState({onlyTwoCheckBox: true})\r\n\t\t\t\tthis.getAxis(this.state)\r\n\t\t\t} else {\r\n\t\t\t\tthis.setState({onlyTwoCheckBox: false})\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst showResultPage = () => {\r\n\t\t\tthis.get_data(this.state)\r\n\t\t\tthis.setState({trueUid: true})\r\n\t\t}\r\n\r\n\t\tconst forms = () => {\r\n\t\t\tif (this.state.trueUid == false) {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<div style={{textAlign: \"center\"}}>\r\n\t\t\t\t\t\t<BasicTextFields title={\"Введите ваш ID для просмотра результатов\"} returnAnswer={this.returnAnswer}/>\r\n\t\t\t\t\t\t<button onClick={() => showResultPage()}>Show result</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)\r\n\t\t\t} else if (this.state.trueUid == true) {\r\n\r\n\t\t\t\tlet result = this.state.onlyTwoCheckBox ? \"\" : \"Выберите только две темы\";\r\n\t\t\t\tlet d = (this.state.compass_compare.axises != undefined) ? resultParty() : \"\";\r\n\t\t\t\treturn (<div>\r\n\t\t\t\t\t{d}\r\n\t\t\t\t\t<h2 className=\"content-center full-result\">Развёрнутые результаты:</h2>\r\n\t\t\t\t\t{axisAverrage}\r\n\t\t\t\t\t{/*<h1 className=\"content-center moreResult\">Поиграйтесь с результатами! Выведите их на график!</h1>*/}\r\n\t\t\t\t\t{/*<h2 className=\"content-center choose3axis\">Выберите два явления, которые вы хотите отобразить:</h2>*/}\r\n\t\t\t\t\t{/*<p className=\"chooseAnswer padding_margin\">{result}</p>*/}\r\n\t\t\t\t\t{/*<div className=\"choose_axises\">*/}\r\n\t\t\t\t\t{/*\t{checkbox}*/}\r\n\t\t\t\t\t{/*</div>*/}\r\n\t\t\t\t\t{/*<div style={{textAlign: \"center\"}}>*/}\r\n\t\t\t\t\t{/*\t<button onClick={() => onlyTwoCheckbox()}>Показать результаты</button>*/}\r\n\t\t\t\t\t{/*</div>*/}\r\n\t\t\t\t\t{/*{chart()}*/}\r\n\t\t\t\t\t{/*<div className={'result-position'}>*/}\r\n\t\t\t\t\t{/*\t<h3>Ближайший вам учитель по выбранным осям:</h3>*/}\r\n\t\t\t\t\t{/*\t<h2>{this.state.position.title}</h2>*/}\r\n\t\t\t\t\t{/*</div>*/}\r\n\t\t\t\t</div>)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"App\">\r\n\t\t\t\t<button onClick={() => console.log(this.state)}></button>\r\n\t\t\t\t{forms()}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n\r\nexport default Result;\r\n","/Users/artur/Programming/workProjects/school_compass/src/Components/form/radiobutton.js",["138","139"],"import React, {useEffect} from 'react';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport \"../../App.css\"\r\n\r\n\r\nexport default function RadioButton(props) {\r\n\tconst [value, setValue] = React.useState('');\r\n\tconst index = props.index\r\n\tconst {ans} = props\r\n\r\n\tconst handleChange = (event) => {\r\n\t\tsetValue(event.target.value)\r\n\t\tprops.returnAnswer(event.target.value, index)\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tif (ans){\r\n\t\t\tsetValue(ans)\r\n\t\t}\r\n\t}, {ans})\r\n\r\n\treturn (\r\n\t\t<div id={props.id}>\r\n\t\t\t<h4 className=\"question_title\">{props.title}</h4>\r\n\t\t\t<FormControl const='fieldset'>\r\n\t\t\t\t<RadioGroup aria-label={props.title}  name={props.title} value={value} onChange={handleChange}>\r\n\t\t\t\t\t{props.answers.map((el, i) => <FormControlLabel className=\"question_item\" key={i} value={el} control={<Radio/> } label={el}/>)}\r\n\t\t\t\t</RadioGroup>\r\n\t\t\t\t<div className=\"chooseAnswer padding_margin\">\r\n\t\t\t\t\t<p>{props.message}</p>\r\n\t\t\t\t</div>\r\n\t\t\t</FormControl>\r\n\t\t</div>\r\n\t)\r\n\t\t;\r\n}","/Users/artur/Programming/workProjects/school_compass/src/Components/form/TextField.js",[],"/Users/artur/Programming/workProjects/school_compass/src/Components/form/checkBox.js",[],"/Users/artur/Programming/workProjects/school_compass/src/Components/form/SelectBox.js",["140"],"import React, { useEffect } from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport \"../../App.css\"\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\tformControl: {\r\n\t\tminWidth: 120,\r\n\t},\r\n\tli:{\r\n\t\tfontSize:\"15px\",\r\n\t}\r\n}));\r\n\r\nexport default function SelectBox(props) {\r\n\tconst classes = useStyles();\r\n\tconst [value, setValue] = React.useState('');\r\n\tconst [open, setOpen] = React.useState(false);\r\n\r\n\tconst {index, response} = props\r\n\r\n\tuseEffect(() => {\r\n\t\tif (response) {\r\n\t\t\tsetValue(response)\r\n\t\t}\r\n\t}, [response])\r\n\r\n\tconst handleChange = (event) => {\r\n\t\tsetValue(event.target.value);\r\n\t\tlet id = props.answers.indexOf(event.target.value)\r\n\t\tprops.returnAnketsAnswer(event.target.value, index)\r\n\t};\r\n\r\n\tconst handleClose = (event) => {\r\n\t\tsetOpen(false)\r\n\t};\r\n\r\n\tconst handleOpen = (event) => {\r\n\t\tsetOpen(true)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h4 className={\"question_title\"}>{props.title}</h4>\r\n\t\t\t<FormControl className={classes.formControl} disabled={props.locked ? true : false}>\r\n\t\t\t\t<InputLabel id=\"controlled-open-select-label\">Выбрать</InputLabel>\r\n\t\t\t\t<Select\r\n\t\t\t\t\tlabelId=\"controlled-open-select-label\"\r\n\t\t\t\t\tid={\"select\" + index}\r\n\t\t\t\t\topen={open}\r\n\t\t\t\t\tonClose={handleClose}\r\n\t\t\t\t\tonOpen={handleOpen}\r\n\t\t\t\t\tvalue={value}\r\n\t\t\t\t\tonChange={handleChange}>\r\n\t\t\t\t\t{props.answers.map((el, i) => <MenuItem className={classes.li} key={i} value={el.value}>{el.name}</MenuItem>)}\r\n\t\t\t\t</Select>\r\n\t\t\t</FormControl>\r\n\t\t</div>\r\n\t)\r\n\r\n}","/Users/artur/Programming/workProjects/school_compass/src/Components/Charts/Scatter.js",[],"/Users/artur/Programming/workProjects/school_compass/src/util/firebase.js",[],"/Users/artur/Programming/workProjects/school_compass/src/Components/shareBtn/facebookShare.js",["141","142","143","144","145","146","147"],"import React from \"react\";\r\nimport {\r\n\tFacebookShareButton,\r\n\tFacebookIcon,\r\n\tVKShareButton,\r\n\tVKIcon,\r\n\tTwitterShareButton,\r\n\tTwitterIcon\r\n} from \"react-share\";\r\nimport \"../../App.css\"\r\n\r\nexport default function FacebookShareBtn(props) {\r\n\tlet message = props.indexLegends.map((el, i) => {\r\n\t\tif (props.legends[i].name == \"Матраимовы\" || props.legends[i].name == \"Жээнбеков\") {\r\n\t\t\tlet legend = Object.values(props.legends[i])[el]\r\n\r\n\t\t\treturn legend\r\n\t\t}\r\n\t})\r\n\r\n\tmessage = message.filter(el => el != undefined)\r\n\treturn (\r\n\t\t<div className={\"buttonsShare\"}>\r\n\t\t\t<TwitterShareButton\r\n\t\t\t\tclassName={'twitter'}\r\n\t\t\t\turl={props.compass_url}\r\n\t\t\t\ttitle={message.join(' ') + \"\\n\\n\" + `Ближайшая мне учитель — ${props.nearestParty}. А у тебя? Пройди тест и узнай:`}\r\n\t\t\t>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<TwitterIcon\r\n\t\t\t\t\t\tsize={\"2.5rem\"}\r\n\t\t\t\t\t\tround\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t</TwitterShareButton>\r\n\t\t\t<FacebookShareButton\r\n\t\t\t\tclassName={'fbb'}\r\n\t\t\t\turl={props.compass_url}\r\n\t\t\t\tquote={message.join(' ') + \"\\n\\n\" + `Ближайшая мне учитель — ${props.nearestParty}. А у тебя? Пройди тест и узнай:${props.compass_url}`}\r\n\t\t\t>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<FacebookIcon\r\n\t\t\t\t\t\tsize={\"2.5rem\"}\r\n\t\t\t\t\t\tround\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t</FacebookShareButton>\r\n\t\t\t<VKShareButton\r\n\t\t\t\turl={props.compass_url}\r\n\t\t\t\ttitle={message.join(' ') + \"\\n\" + `Ближайшая мне учитель — ${props.nearestParty}. А у тебя? Пройди тест и узнай:`}\r\n\t\t\t>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<VKIcon\r\n\t\t\t\t\t\tsize={\"2.5rem\"}\r\n\t\t\t\t\t\tround/>\r\n\t\t\t\t</div>\r\n\t\t\t</VKShareButton>\r\n\t\t</div>\r\n\t)\r\n}","/Users/artur/Programming/workProjects/school_compass/src/Components/axisAverrage/ScatterLineResult.js",["148","149","150"],"import React from 'react';\r\nimport ReactEcharts from \"echarts-for-react\";\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport 'echarts-gl';\r\nimport \"../../App.css\"\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\tformControl: {\r\n\t\theight: 60,\r\n\t},\r\n}));\r\n\r\nexport default function ScatterLine(props) {\r\n\tconst classes = useStyles()\r\n\tlet distanceIs;\r\n\tlet minDistance = Infinity\r\n\tlet position;\r\n\tlet distance = require('euclidean-distance')\r\n\tconst partyColor = props.partyColor\r\n\r\n\tlet axises = props.partyAxises.map((el, i) => {\r\n\t\tlet partyAxis = {\r\n\t\t\tname: props.names[i],\r\n\t\t\tsymbolSize: 12,\r\n\t\t\tdata: [[el[props.index], 0]],\r\n\t\t\ttype: 'scatter',\r\n\t\t\tsymbol: \"circle\",\r\n\t\t\tcolor: partyColor[i],\r\n\t\t\temphasis: {\r\n\t\t\t\tlabel: {\r\n\t\t\t\t\tshow: true,\r\n\t\t\t\t\tformatter: props.names[i],\r\n\t\t\t\t\tposition: 'top'\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//get min distance\r\n\t\tdistanceIs = distance([props.axisAverrage, 0], [el[props.index], 0])\r\n\t\tif (distanceIs < minDistance) {\r\n\t\t\tminDistance = distanceIs;\r\n\r\n\t\t\tposition = {\r\n\t\t\t\tdistance: minDistance,\r\n\t\t\t\ttitle: props.names[i],\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn partyAxis\r\n\t})\r\n\r\n\taxises.push({\r\n\t\tsymbolSize: 22,\r\n\t\tdata: [[props.axisAverrage, 0]],\r\n\t\ttype: 'scatter',\r\n\t\tcolor: 'red',\r\n\t\tsymbol: \"diamond\",\r\n\t\tlabel: {\r\n\t\t\tshow: true,\r\n\t\t\tposition: 'top',\r\n\t\t\tformatter: \"Я\",\r\n\t\t\tfontWeight: \"bold\"\r\n\r\n\t\t},\r\n\t\temphasis: {\r\n\t\t\tlabel: {\r\n\t\t\t\tshow: true,\r\n\t\t\t\tformatter: \"Я\",\r\n\t\t\t\tposition: 'top'\r\n\t\t\t}\r\n\t\t}\r\n\t})\r\n\r\n\r\n\tconst getOption = () => ({\r\n\t\tcolor: partyColor,\r\n\t\tlegend: {\r\n\t\t\tdata: props.names,\r\n\t\t\torient: \"horizontal\",\r\n\t\t\tbottom: \"0%\",\r\n\t\t\twidth: \"100%\",\r\n\t\t},\r\n\t\txAxis: {\r\n\t\t\tmin: -2,\r\n\t\t\tmax: 2,\r\n\t\t},\r\n\t\tyAxis: {\r\n\t\t\tshow: false\r\n\t\t},\r\n\t\theight: 0,\r\n\t\tseries: axises,\r\n\t})\r\n\r\n\treturn (\r\n\t\t<div className='scatter-line'>\r\n\t\t\t<div className={\"nameAxis\"}>\r\n\t\t\t\t<h5 style={{textAlign: \"center\"}}>{props.axisName}: {parseFloat(props.axisAverrage).toFixed(2)}</h5>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<div className={\"decision\"}>\r\n\t\t\t\t\t<p className={\"minus\"}>\r\n\t\t\t\t\t\t{props.axisPoints.minus}<br/>\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<p className={\"plus\"}>{props.axisPoints.plus}<br/>\r\n\t\t\t\t\t</p>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className={\"arrows\"}>\r\n\t\t\t\t\t<i className=\"em em-arrow_left\" aria-role=\"presentation\" aria-label=\"LEFTWARDS BLACK ARROW\"></i>\r\n\t\t\t\t\t<i className=\"em em-arrow_right\" aria-role=\"presentation\" aria-label=\"LEFTWARDS BLACK ARROW\"></i>\r\n\t\t\t\t</div>\r\n\t\t\t\t<ReactEcharts style={{height: \"250px\"}} className={`scatter`} option={getOption()}/>\r\n\t\t\t</div>\r\n\t\t\t<h4>{props.axisNearest} — \"{position.title}\"</h4>\r\n\t\t</div>\r\n\t)\r\n}",["151","152"],"/Users/artur/Programming/workProjects/school_compass/src/Components/axisAverrage/PrecentOfAnswered.js",["153"],"import React, {useEffect} from \"react\";\r\nimport \"../../App.css\"\r\n\r\n\r\nexport default function PrecentOfAnswered(props){\r\n\tconst lengthQuestion = props.lenQuestions\r\n\tconst current = props.currentQuestions;\r\n\r\n\tconst precentOfAnswered = (current*100)/lengthQuestion\r\n\treturn(\r\n\t\t<div style={{textAlign:\"center\"}}>\r\n\t\t\t<h4 id=\"precentOfAnswered\" className=\"question_title\">\r\n\t\t\t\tВы заполнили компас на {Math.ceil(precentOfAnswered)}%\r\n\t\t\t</h4>\r\n\t\t</div>\r\n\t)\r\n}",{"ruleId":"154","replacedBy":"155"},{"ruleId":"156","replacedBy":"157"},{"ruleId":"158","severity":1,"message":"159","line":1,"column":16,"nodeType":"160","messageId":"161","endLine":1,"endColumn":25},{"ruleId":"158","severity":1,"message":"162","line":1,"column":27,"nodeType":"160","messageId":"161","endLine":1,"endColumn":36},{"ruleId":"158","severity":1,"message":"163","line":10,"column":8,"nodeType":"160","messageId":"161","endLine":10,"endColumn":14},{"ruleId":"158","severity":1,"message":"164","line":11,"column":8,"nodeType":"160","messageId":"161","endLine":11,"endColumn":15},{"ruleId":"158","severity":1,"message":"159","line":1,"column":27,"nodeType":"160","messageId":"161","endLine":1,"endColumn":36},{"ruleId":"158","severity":1,"message":"165","line":1,"column":38,"nodeType":"160","messageId":"161","endLine":1,"endColumn":46},{"ruleId":"158","severity":1,"message":"166","line":9,"column":8,"nodeType":"160","messageId":"161","endLine":9,"endColumn":11},{"ruleId":"158","severity":1,"message":"167","line":9,"column":14,"nodeType":"160","messageId":"161","endLine":9,"endColumn":30},{"ruleId":"158","severity":1,"message":"168","line":9,"column":32,"nodeType":"160","messageId":"161","endLine":9,"endColumn":49},{"ruleId":"169","severity":1,"message":"170","line":119,"column":10,"nodeType":"171","messageId":"172","endLine":119,"endColumn":12},{"ruleId":"169","severity":1,"message":"170","line":121,"column":17,"nodeType":"171","messageId":"172","endLine":121,"endColumn":19},{"ruleId":"169","severity":1,"message":"170","line":129,"column":107,"nodeType":"171","messageId":"172","endLine":129,"endColumn":109},{"ruleId":"173","severity":1,"message":"174","line":164,"column":62,"nodeType":"175","messageId":"176","endLine":164,"endColumn":64},{"ruleId":"169","severity":1,"message":"177","line":177,"column":10,"nodeType":"171","messageId":"172","endLine":177,"endColumn":12},{"ruleId":"178","severity":1,"message":"179","line":182,"column":3,"nodeType":"180","messageId":"181","endLine":182,"endColumn":38},{"ruleId":"169","severity":1,"message":"177","line":236,"column":13,"nodeType":"171","messageId":"172","endLine":236,"endColumn":15},{"ruleId":"169","severity":1,"message":"177","line":249,"column":11,"nodeType":"171","messageId":"172","endLine":249,"endColumn":13},{"ruleId":"169","severity":1,"message":"177","line":258,"column":11,"nodeType":"171","messageId":"172","endLine":258,"endColumn":13},{"ruleId":"158","severity":1,"message":"182","line":267,"column":9,"nodeType":"160","messageId":"161","endLine":267,"endColumn":21},{"ruleId":"173","severity":1,"message":"183","line":289,"column":60,"nodeType":"175","messageId":"184","endLine":289,"endColumn":62},{"ruleId":"169","severity":1,"message":"177","line":303,"column":21,"nodeType":"171","messageId":"172","endLine":303,"endColumn":23},{"ruleId":"169","severity":1,"message":"170","line":357,"column":35,"nodeType":"171","messageId":"172","endLine":357,"endColumn":37},{"ruleId":"169","severity":1,"message":"170","line":375,"column":27,"nodeType":"171","messageId":"172","endLine":375,"endColumn":29},{"ruleId":"169","severity":1,"message":"170","line":405,"column":53,"nodeType":"171","messageId":"172","endLine":405,"endColumn":55},{"ruleId":"173","severity":1,"message":"174","line":418,"column":39,"nodeType":"175","messageId":"176","endLine":418,"endColumn":41},{"ruleId":"169","severity":1,"message":"177","line":421,"column":43,"nodeType":"171","messageId":"172","endLine":421,"endColumn":45},{"ruleId":"169","severity":1,"message":"177","line":462,"column":26,"nodeType":"171","messageId":"172","endLine":462,"endColumn":28},{"ruleId":"169","severity":1,"message":"170","line":466,"column":27,"nodeType":"171","messageId":"172","endLine":466,"endColumn":29},{"ruleId":"173","severity":1,"message":"183","line":494,"column":50,"nodeType":"175","messageId":"184","endLine":494,"endColumn":52},{"ruleId":"169","severity":1,"message":"170","line":502,"column":56,"nodeType":"171","messageId":"172","endLine":502,"endColumn":58},{"ruleId":"169","severity":1,"message":"170","line":538,"column":32,"nodeType":"171","messageId":"172","endLine":538,"endColumn":34},{"ruleId":"169","severity":1,"message":"170","line":552,"column":49,"nodeType":"171","messageId":"172","endLine":552,"endColumn":51},{"ruleId":"169","severity":1,"message":"177","line":552,"column":139,"nodeType":"171","messageId":"172","endLine":552,"endColumn":141},{"ruleId":"169","severity":1,"message":"177","line":552,"column":199,"nodeType":"171","messageId":"172","endLine":552,"endColumn":201},{"ruleId":"169","severity":1,"message":"170","line":561,"column":32,"nodeType":"171","messageId":"172","endLine":561,"endColumn":34},{"ruleId":"169","severity":1,"message":"170","line":573,"column":45,"nodeType":"171","messageId":"172","endLine":573,"endColumn":47},{"ruleId":"169","severity":1,"message":"170","line":574,"column":25,"nodeType":"171","messageId":"172","endLine":574,"endColumn":27},{"ruleId":"169","severity":1,"message":"170","line":583,"column":25,"nodeType":"171","messageId":"172","endLine":583,"endColumn":27},{"ruleId":"169","severity":1,"message":"170","line":584,"column":49,"nodeType":"171","messageId":"172","endLine":584,"endColumn":51},{"ruleId":"169","severity":1,"message":"170","line":594,"column":93,"nodeType":"171","messageId":"172","endLine":594,"endColumn":95},{"ruleId":"169","severity":1,"message":"177","line":596,"column":48,"nodeType":"171","messageId":"172","endLine":596,"endColumn":50},{"ruleId":"169","severity":1,"message":"170","line":617,"column":59,"nodeType":"171","messageId":"172","endLine":617,"endColumn":61},{"ruleId":"158","severity":1,"message":"159","line":1,"column":27,"nodeType":"160","messageId":"161","endLine":1,"endColumn":36},{"ruleId":"158","severity":1,"message":"165","line":1,"column":38,"nodeType":"160","messageId":"161","endLine":1,"endColumn":46},{"ruleId":"173","severity":1,"message":"174","line":132,"column":62,"nodeType":"175","messageId":"176","endLine":132,"endColumn":64},{"ruleId":"169","severity":1,"message":"177","line":145,"column":10,"nodeType":"171","messageId":"172","endLine":145,"endColumn":12},{"ruleId":"178","severity":1,"message":"179","line":150,"column":3,"nodeType":"180","messageId":"181","endLine":150,"endColumn":38},{"ruleId":"169","severity":1,"message":"177","line":198,"column":13,"nodeType":"171","messageId":"172","endLine":198,"endColumn":15},{"ruleId":"169","severity":1,"message":"177","line":211,"column":11,"nodeType":"171","messageId":"172","endLine":211,"endColumn":13},{"ruleId":"169","severity":1,"message":"177","line":220,"column":11,"nodeType":"171","messageId":"172","endLine":220,"endColumn":13},{"ruleId":"158","severity":1,"message":"182","line":229,"column":9,"nodeType":"160","messageId":"161","endLine":229,"endColumn":21},{"ruleId":"173","severity":1,"message":"183","line":251,"column":60,"nodeType":"175","messageId":"184","endLine":251,"endColumn":62},{"ruleId":"169","severity":1,"message":"177","line":265,"column":21,"nodeType":"171","messageId":"172","endLine":265,"endColumn":23},{"ruleId":"169","severity":1,"message":"170","line":319,"column":35,"nodeType":"171","messageId":"172","endLine":319,"endColumn":37},{"ruleId":"158","severity":1,"message":"185","line":341,"column":7,"nodeType":"160","messageId":"161","endLine":341,"endColumn":15},{"ruleId":"158","severity":1,"message":"186","line":348,"column":7,"nodeType":"160","messageId":"161","endLine":348,"endColumn":12},{"ruleId":"169","severity":1,"message":"177","line":349,"column":26,"nodeType":"171","messageId":"172","endLine":349,"endColumn":28},{"ruleId":"169","severity":1,"message":"170","line":353,"column":27,"nodeType":"171","messageId":"172","endLine":353,"endColumn":29},{"ruleId":"173","severity":1,"message":"183","line":381,"column":50,"nodeType":"175","messageId":"184","endLine":381,"endColumn":52},{"ruleId":"169","severity":1,"message":"170","line":389,"column":54,"nodeType":"171","messageId":"172","endLine":389,"endColumn":56},{"ruleId":"158","severity":1,"message":"187","line":418,"column":7,"nodeType":"160","messageId":"161","endLine":418,"endColumn":18},{"ruleId":"158","severity":1,"message":"188","line":423,"column":7,"nodeType":"160","messageId":"161","endLine":423,"endColumn":22},{"ruleId":"169","severity":1,"message":"170","line":425,"column":45,"nodeType":"171","messageId":"172","endLine":425,"endColumn":47},{"ruleId":"169","severity":1,"message":"170","line":426,"column":25,"nodeType":"171","messageId":"172","endLine":426,"endColumn":27},{"ruleId":"169","severity":1,"message":"170","line":440,"column":27,"nodeType":"171","messageId":"172","endLine":440,"endColumn":29},{"ruleId":"169","severity":1,"message":"170","line":447,"column":34,"nodeType":"171","messageId":"172","endLine":447,"endColumn":36},{"ruleId":"158","severity":1,"message":"189","line":449,"column":9,"nodeType":"160","messageId":"161","endLine":449,"endColumn":15},{"ruleId":"169","severity":1,"message":"177","line":450,"column":48,"nodeType":"171","messageId":"172","endLine":450,"endColumn":50},{"ruleId":"190","severity":1,"message":"191","line":23,"column":5,"nodeType":"192","endLine":23,"endColumn":10},{"ruleId":"190","severity":1,"message":"193","line":23,"column":5,"nodeType":"192","endLine":23,"endColumn":10,"suggestions":"194"},{"ruleId":"158","severity":1,"message":"195","line":34,"column":7,"nodeType":"160","messageId":"161","endLine":34,"endColumn":9},{"ruleId":"173","severity":1,"message":"174","line":13,"column":47,"nodeType":"175","messageId":"176","endLine":13,"endColumn":49},{"ruleId":"169","severity":1,"message":"170","line":14,"column":29,"nodeType":"171","messageId":"172","endLine":14,"endColumn":31},{"ruleId":"169","severity":1,"message":"170","line":14,"column":70,"nodeType":"171","messageId":"172","endLine":14,"endColumn":72},{"ruleId":"169","severity":1,"message":"177","line":21,"column":36,"nodeType":"171","messageId":"172","endLine":21,"endColumn":38},{"ruleId":"196","severity":1,"message":"197","line":27,"column":39,"nodeType":"171","messageId":"198","endLine":27,"endColumn":40},{"ruleId":"196","severity":1,"message":"197","line":39,"column":39,"nodeType":"171","messageId":"198","endLine":39,"endColumn":40},{"ruleId":"196","severity":1,"message":"197","line":50,"column":37,"nodeType":"171","messageId":"198","endLine":50,"endColumn":38},{"ruleId":"158","severity":1,"message":"199","line":14,"column":8,"nodeType":"160","messageId":"161","endLine":14,"endColumn":15},{"ruleId":"200","severity":1,"message":"201","line":112,"column":38,"nodeType":"202","endLine":112,"endColumn":62},{"ruleId":"200","severity":1,"message":"201","line":113,"column":39,"nodeType":"202","endLine":113,"endColumn":63},{"ruleId":"154","replacedBy":"203"},{"ruleId":"156","replacedBy":"204"},{"ruleId":"158","severity":1,"message":"159","line":1,"column":16,"nodeType":"160","messageId":"161","endLine":1,"endColumn":25},"no-native-reassign",["205"],"no-negated-in-lhs",["206"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Component' is defined but never used.","'Result' is defined but never used.","'ReactGa' is defined but never used.","'useState' is defined but never used.","'app' is defined but never used.","'signInWithGoogle' is defined but never used.","'signInAnonymously' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Expected '!==' and instead saw '!='.","no-unreachable","Unreachable code.","ExpressionStatement","unreachableCode","'minDistances' is assigned a value but never used.","Array.prototype.map() expects a return value from arrow function.","expectedInside","'checkbox' is assigned a value but never used.","'chart' is assigned a value but never used.","'topFunction' is assigned a value but never used.","'onlyTwoCheckbox' is assigned a value but never used.","'result' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.","ObjectExpression","React Hook useEffect has a missing dependency: 'ans'. Either include it or remove the dependency array.",["207"],"'id' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'classes' is assigned a value but never used.","jsx-a11y/aria-props","aria-role: This attribute is an invalid ARIA attribute.","JSXAttribute",["205"],["206"],"no-global-assign","no-unsafe-negation",{"desc":"208","fix":"209"},"Update the dependencies array to be: [ans]",{"range":"210","text":"211"},[627,632],"[ans]"]