{"version":3,"sources":["Components/form/radiobutton.js","Components/form/checkBox.js","Components/form/SelectBox.js","Components/Charts/Scatter.js","util/firebase.js","Components/shareBtn/facebookShare.js","Components/axisAverrage/ScatterLineResult.js","Components/axisAverrage/PrecentOfAnswered.js","Components/auth/Home.js","Components/form/TextField.js","Components/auth/Result.js","App.js","reportWebVitals.js","index.js"],"names":["RadioButton","props","React","useState","value","setValue","index","ans","useEffect","id","className","title","FormControl","const","RadioGroup","aria-label","name","onChange","event","target","returnAnswer","answers","map","el","i","FormControlLabel","control","Radio","label","message","CheckBox","FormGroup","Checkbox","checked","returnAxisName","key","useStyles","makeStyles","theme","formControl","minWidth","li","fontSize","SelectBox","classes","open","setOpen","response","disabled","locked","InputLabel","Select","labelId","onClose","onOpen","indexOf","returnAnketsAnswer","MenuItem","paddingBottom","Scatter","color","partyColor","axises","names","symbolSize","data","type","symbol","emphasis","show","formatter","position","push","myAxis","fontWeight","style","height","option","legend","orient","top","left","grid","z","bottom","xAxis","min","max","yAxis","series","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","GoogleAuthProvider","FacebookShareBtn","indexLegends","legends","Object","values","filter","undefined","TwitterShareButton","url","compass_url","join","nearestParty","TwitterIcon","size","round","FacebookShareButton","quote","FacebookIcon","VKShareButton","VKIcon","ScatterLine","distanceIs","minDistance","Infinity","distance","require","partyAxises","partyAxis","axisAverrage","textAlign","axisName","parseFloat","toFixed","axisPoints","minus","plus","aria-role","width","axisNearest","PrecentOfAnswered","lengthQuestion","lenQuestions","precentOfAnswered","currentQuestions","Math","ceil","queryString","Home","state","questions","main_title","gateway","notAnswered","axis_points","total_axis","axis_title_values","axis_values","axis","axis_title","axises_object","axis_names","all_axis","answer_title_values","answer_values","answer_values_males","count_axises","compass_compare","default_axises","all_axis_averrage","batch_axises","onlyTwoCheckBox","showAnswers","questions_on_page","first_questions","anket","anket_all_answers","anketa_questions","anket_answers","axis_legends","legendary","nearestTeacher","saveData","uid","user","currentUser","downloadData","urlString","parse","window","location","search","decode","console","log","fetch","then","json","setState","getNotAnswered","pl","elToIntArr","array","forEach","Number","currentQset","slice","idxsOfAnswered","keys","answer","axis_name","getAxisMainTemplate","mainTemplate","length","assign","getAxisTemplate","axis_index","axis_object","template","entries","item","reverse","returnAxis","getAxis","index_question","state_answers","axises_names","axis_count","axs","answer_type","answer_type_index","answer_index","axis_type","axis_type_index","axis_is","sort","Set","difference","lastIndexOf","getAxisAverage","sum","distanceEuclid","positionInfo","axises_object_keys","axises_object_values","axises_idx","item_index","default_axis","axis_idx","idx","legendByAxis","legendsByAxis","legendIs","itIs","indexAxisByName","saving_data","answ","answerIdx","db","firestore","collection","onAuthStateChanged","doc","set","male","grade","axises_averrage","this","questionList","type_answers","index_type","checkbox","chart","axisesNames","topFunction","document","body","scrollTop","documentElement","nextAndScrollTop","whichNotAnswered","getElementById","scrollIntoView","behavior","block","previousAndScrollTop","onClick","signOut","result","d","minIs","resultTeacher","previousPageShowing","display","forms","Component","root","BasicTextFields","noValidate","autoComplete","TextField","App","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.a518a89e.chunk.js","sourcesContent":["import React, {useEffect} from 'react';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport \"../../App.css\"\r\n\r\n\r\nexport default function RadioButton(props) {\r\n\tconst [value, setValue] = React.useState('');\r\n\tconst index = props.index\r\n\tconst {ans} = props\r\n\r\n\tconst handleChange = (event) => {\r\n\t\tsetValue(event.target.value)\r\n\t\tprops.returnAnswer(event.target.value, index)\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tif (ans){\r\n\t\t\tsetValue(ans)\r\n\t\t}\r\n\t}, {ans})\r\n\r\n\treturn (\r\n\t\t<div id={props.id}>\r\n\t\t\t<h4 className=\"question_title\">{props.title}</h4>\r\n\t\t\t<FormControl const='fieldset'>\r\n\t\t\t\t<RadioGroup aria-label={props.title}  name={props.title} value={value} onChange={handleChange}>\r\n\t\t\t\t\t{props.answers.map((el, i) => <FormControlLabel className=\"question_item\" key={i} value={el} control={<Radio/> } label={el}/>)}\r\n\t\t\t\t</RadioGroup>\r\n\t\t\t\t<div className=\"chooseAnswer padding_margin\">\r\n\t\t\t\t\t<p>{props.message}</p>\r\n\t\t\t\t</div>\r\n\t\t\t</FormControl>\r\n\t\t</div>\r\n\t)\r\n\t\t;\r\n}","import React from \"react\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport \"../../App.css\"\r\n\r\nexport default function CheckBox(props) {\r\n\tconst [value, setValue] = React.useState(false)\r\n\tconst index = props.index\r\n\r\n\tconst handleChange = (event) => {\r\n\t\tsetValue(event.target.checked)\r\n\t\tprops.returnAxisName(event.target.checked, index)\r\n\t}\r\n\r\n\treturn (\r\n\t\t\t<FormGroup>\r\n\t\t\t\t<FormControlLabel\r\n\t\t\t\t\tcontrol={<Checkbox className=\"question_item\" checked={value} onChange={handleChange} key={props.key}\r\n\t\t\t\t\t                   value={props.name}/>}\r\n\t\t\t\t\tlabel={props.title}\r\n\t\t\t\t/>\r\n\t\t\t</FormGroup>\r\n\t)\r\n}","import React, { useEffect } from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport \"../../App.css\"\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\tformControl: {\r\n\t\tminWidth: 120,\r\n\t},\r\n\tli:{\r\n\t\tfontSize:\"15px\",\r\n\t}\r\n}));\r\n\r\nexport default function SelectBox(props) {\r\n\tconst classes = useStyles();\r\n\tconst [value, setValue] = React.useState('');\r\n\tconst [open, setOpen] = React.useState(false);\r\n\r\n\tconst {index, response} = props\r\n\r\n\tuseEffect(() => {\r\n\t\tif (response) {\r\n\t\t\tsetValue(response)\r\n\t\t}\r\n\t}, [response])\r\n\r\n\tconst handleChange = (event) => {\r\n\t\tsetValue(event.target.value);\r\n\t\tlet id = props.answers.indexOf(event.target.value)\r\n\t\tprops.returnAnketsAnswer(event.target.value, index)\r\n\t};\r\n\r\n\tconst handleClose = (event) => {\r\n\t\tsetOpen(false)\r\n\t};\r\n\r\n\tconst handleOpen = (event) => {\r\n\t\tsetOpen(true)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h4 className={\"question_title\"}>{props.title}</h4>\r\n\t\t\t<FormControl className={classes.formControl} disabled={props.locked ? true : false}>\r\n\t\t\t\t<InputLabel id=\"controlled-open-select-label\">Выбрать</InputLabel>\r\n\t\t\t\t<Select\r\n\t\t\t\t\tlabelId=\"controlled-open-select-label\"\r\n\t\t\t\t\tid={\"select\" + index}\r\n\t\t\t\t\topen={open}\r\n\t\t\t\t\tonClose={handleClose}\r\n\t\t\t\t\tonOpen={handleOpen}\r\n\t\t\t\t\tvalue={value}\r\n\t\t\t\t\tonChange={handleChange}>\r\n\t\t\t\t\t{props.answers.map((el, i) => <MenuItem className={classes.li} key={i} value={el.value}>{el.name}</MenuItem>)}\r\n\t\t\t\t</Select>\r\n\t\t\t</FormControl>\r\n\t\t</div>\r\n\t)\r\n\r\n}","import React from 'react';\r\nimport ReactEcharts from \"echarts-for-react\";\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport 'echarts-gl';\r\nimport \"../../App.css\"\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\tformControl: {\r\n\t\tpaddingBottom: 0,\r\n\t},\r\n}));\r\n\r\nexport default function Scatter(props) {\r\n\tconst classes = useStyles();\r\n\tconst color = props.partyColor\r\n\tlet axises = props.axises.map((el, i) => {\r\n\t\tlet partyAxis = {\r\n\t\t\tname: props.names[i],\r\n\t\t\tsymbolSize: 12,\r\n\t\t\tdata: [el],\r\n\t\t\ttype: 'scatter',\r\n\t\t\tsymbol: 'circle',\r\n\t\t\tcolor: color[i],\r\n\t\t\temphasis: {\r\n\t\t\t\tlabel: {\r\n\t\t\t\t\tshow: true,\r\n\t\t\t\t\tformatter: props.names[i],\r\n\t\t\t\t\tposition: 'top'\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn partyAxis\r\n\t})\r\n\r\n\taxises.push({\r\n\t\tsymbolSize: 22,\r\n\t\tdata: [props.myAxis],\r\n\t\ttype: 'scatter',\r\n\t\tsymbol: \"diamond\",\r\n\t\tname: \"Я\",\r\n\t\tcolor: 'red',\r\n\t\tlabel: {\r\n\t\t\tshow: true,\r\n\t\t\tposition: 'top',\r\n\t\t\tformatter: \"Я\",\r\n\t\t\tfontWeight: \"bold\"\r\n\r\n\t\t}\r\n\t})\r\n\r\n\tconst getOption = () => ({\r\n\t\tcolor: color,\r\n\t\tlegend: {\r\n\t\t\tshow: true,\r\n\t\t\tdata: props.names,\r\n\t\t\torient: \"horizontal\",\r\n\t\t\theight: 'auto',\r\n\t\t\ttop: \"3%\",\r\n\t\t\tleft: 0,\r\n\t\t},\r\n\t\tgrid: {\r\n\t\t\tz: 2,\r\n\t\t\ttop: \"30%\",\r\n\t\t\theight: \"50%\",\r\n\t\t\tbottom: \"10%\"\r\n\t\t},\r\n\t\txAxis: {\r\n\t\t\tname: 'x',\r\n\t\t\tmin: -2,\r\n\t\t\tmax: 2,\r\n\r\n\t\t},\r\n\t\tyAxis: {\r\n\t\t\tname: 'y',\r\n\t\t\tmin: -2,\r\n\t\t\tmax: 2,\r\n\r\n\t\t},\r\n\t\tseries: axises\r\n\t})\r\n\treturn (\r\n\t\t<div className={classes.formControl}>\r\n\t\t\t\t\t<ReactEcharts style={{height: \"550px\"}} option={getOption()}/>\r\n\t\t</div>\r\n\t);\r\n}","import firebase from 'firebase';\r\n\r\nconst firebaseConfig = {\r\n\tapiKey: \"AIzaSyADuNBmOC6WQ9ON-CLTZeTDyaLA1J27IsA\",\r\n\tauthDomain: \"schoolcompasste.firebaseapp.com\",\r\n\tdatabaseURL: \"https://schoolcompasste.firebaseio.com\",\r\n\tprojectId: \"schoolcompasste\",\r\n\tstorageBucket: \"schoolcompasste.appspot.com\",\r\n\tmessagingSenderId: \"241085209563\",\r\n\tappId: \"1:241085209563:web:a538cc6ef38f2fe550e5fe\",\r\n\tmeasurementId: \"G-9W8J6Y2863\"\r\n}\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\nexport const signInWithGoogle = () => {\r\n\tfirebase.auth().signInWithPopup(provider);\r\n};\r\n\r\nexport const signInAnonymously = () => {\r\n\tfirebase.auth().signInAnonymously()\r\n}\r\n\r\nexport default firebase;","import React from \"react\";\r\nimport {\r\n\tFacebookShareButton,\r\n\tFacebookIcon,\r\n\tVKShareButton,\r\n\tVKIcon,\r\n\tTwitterShareButton,\r\n\tTwitterIcon\r\n} from \"react-share\";\r\nimport \"../../App.css\"\r\n\r\nexport default function FacebookShareBtn(props) {\r\n\tlet message = props.indexLegends.map((el, i) => {\r\n\t\tif (props.legends[i].name == \"Матраимовы\" || props.legends[i].name == \"Жээнбеков\") {\r\n\t\t\tlet legend = Object.values(props.legends[i])[el]\r\n\r\n\t\t\treturn legend\r\n\t\t}\r\n\t})\r\n\r\n\tmessage = message.filter(el => el != undefined)\r\n\treturn (\r\n\t\t<div className={\"buttonsShare\"}>\r\n\t\t\t<TwitterShareButton\r\n\t\t\t\tclassName={'twitter'}\r\n\t\t\t\turl={props.compass_url}\r\n\t\t\t\ttitle={message.join(' ') + \"\\n\\n\" + `Ближайшая мне учитель — ${props.nearestParty}. А у тебя? Пройди тест и узнай:`}\r\n\t\t\t>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<TwitterIcon\r\n\t\t\t\t\t\tsize={\"2.5rem\"}\r\n\t\t\t\t\t\tround\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t</TwitterShareButton>\r\n\t\t\t<FacebookShareButton\r\n\t\t\t\tclassName={'fbb'}\r\n\t\t\t\turl={props.compass_url}\r\n\t\t\t\tquote={message.join(' ') + \"\\n\\n\" + `Ближайшая мне учитель — ${props.nearestParty}. А у тебя? Пройди тест и узнай:${props.compass_url}`}\r\n\t\t\t>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<FacebookIcon\r\n\t\t\t\t\t\tsize={\"2.5rem\"}\r\n\t\t\t\t\t\tround\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t</FacebookShareButton>\r\n\t\t\t<VKShareButton\r\n\t\t\t\turl={props.compass_url}\r\n\t\t\t\ttitle={message.join(' ') + \"\\n\" + `Ближайшая мне учитель — ${props.nearestParty}. А у тебя? Пройди тест и узнай:`}\r\n\t\t\t>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<VKIcon\r\n\t\t\t\t\t\tsize={\"2.5rem\"}\r\n\t\t\t\t\t\tround/>\r\n\t\t\t\t</div>\r\n\t\t\t</VKShareButton>\r\n\t\t</div>\r\n\t)\r\n}","import React from 'react';\r\nimport ReactEcharts from \"echarts-for-react\";\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport 'echarts-gl';\r\nimport \"../../App.css\"\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\tformControl: {\r\n\t\theight: 60,\r\n\t},\r\n}));\r\n\r\nexport default function ScatterLine(props) {\r\n\tconst classes = useStyles()\r\n\tlet distanceIs;\r\n\tlet minDistance = Infinity\r\n\tlet position;\r\n\tlet distance = require('euclidean-distance')\r\n\tconst partyColor = props.partyColor\r\n\r\n\tlet axises = props.partyAxises.map((el, i) => {\r\n\t\tlet partyAxis = {\r\n\t\t\tname: props.names[i],\r\n\t\t\tsymbolSize: 12,\r\n\t\t\tdata: [[el[props.index], 0]],\r\n\t\t\ttype: 'scatter',\r\n\t\t\tsymbol: \"circle\",\r\n\t\t\tcolor: partyColor[i],\r\n\t\t\temphasis: {\r\n\t\t\t\tlabel: {\r\n\t\t\t\t\tshow: true,\r\n\t\t\t\t\tformatter: props.names[i],\r\n\t\t\t\t\tposition: 'top'\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//get min distance\r\n\t\tdistanceIs = distance([props.axisAverrage, 0], [el[props.index], 0])\r\n\t\tif (distanceIs < minDistance) {\r\n\t\t\tminDistance = distanceIs;\r\n\r\n\t\t\tposition = {\r\n\t\t\t\tdistance: minDistance,\r\n\t\t\t\ttitle: props.names[i],\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn partyAxis\r\n\t})\r\n\r\n\taxises.push({\r\n\t\tsymbolSize: 22,\r\n\t\tdata: [[props.axisAverrage, 0]],\r\n\t\ttype: 'scatter',\r\n\t\tcolor: 'red',\r\n\t\tsymbol: \"diamond\",\r\n\t\tlabel: {\r\n\t\t\tshow: true,\r\n\t\t\tposition: 'top',\r\n\t\t\tformatter: \"Я\",\r\n\t\t\tfontWeight: \"bold\"\r\n\r\n\t\t},\r\n\t\temphasis: {\r\n\t\t\tlabel: {\r\n\t\t\t\tshow: true,\r\n\t\t\t\tformatter: \"Я\",\r\n\t\t\t\tposition: 'top'\r\n\t\t\t}\r\n\t\t}\r\n\t})\r\n\r\n\r\n\tconst getOption = () => ({\r\n\t\tcolor: partyColor,\r\n\t\tlegend: {\r\n\t\t\tdata: props.names,\r\n\t\t\torient: \"horizontal\",\r\n\t\t\tbottom: \"0%\",\r\n\t\t\twidth: \"100%\",\r\n\t\t},\r\n\t\txAxis: {\r\n\t\t\tmin: -2,\r\n\t\t\tmax: 2,\r\n\t\t},\r\n\t\tyAxis: {\r\n\t\t\tshow: false\r\n\t\t},\r\n\t\theight: 0,\r\n\t\tseries: axises,\r\n\t})\r\n\r\n\treturn (\r\n\t\t<div className='scatter-line'>\r\n\t\t\t<div className={\"nameAxis\"}>\r\n\t\t\t\t<h5 style={{textAlign: \"center\"}}>{props.axisName}: {parseFloat(props.axisAverrage).toFixed(2)}</h5>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<div className={\"decision\"}>\r\n\t\t\t\t\t<p className={\"minus\"}>\r\n\t\t\t\t\t\t{props.axisPoints.minus}<br/>\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<p className={\"plus\"}>{props.axisPoints.plus}<br/>\r\n\t\t\t\t\t</p>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className={\"arrows\"}>\r\n\t\t\t\t\t<i className=\"em em-arrow_left\" aria-role=\"presentation\" aria-label=\"LEFTWARDS BLACK ARROW\"></i>\r\n\t\t\t\t\t<i className=\"em em-arrow_right\" aria-role=\"presentation\" aria-label=\"LEFTWARDS BLACK ARROW\"></i>\r\n\t\t\t\t</div>\r\n\t\t\t\t<ReactEcharts style={{height: \"250px\"}} className={`scatter`} option={getOption()}/>\r\n\t\t\t</div>\r\n\t\t\t<h4>{props.axisNearest} — \"{position.title}\"</h4>\r\n\t\t</div>\r\n\t)\r\n}","import React, {useEffect} from \"react\";\r\nimport \"../../App.css\"\r\n\r\n\r\nexport default function PrecentOfAnswered(props){\r\n\tconst lengthQuestion = props.lenQuestions\r\n\tconst current = props.currentQuestions;\r\n\r\n\tconst precentOfAnswered = (current*100)/lengthQuestion\r\n\treturn(\r\n\t\t<div style={{textAlign:\"center\"}}>\r\n\t\t\t<h4 id=\"precentOfAnswered\" className=\"question_title\">\r\n\t\t\t\tВы заполнили компас на {Math.ceil(precentOfAnswered)}%\r\n\t\t\t</h4>\r\n\t\t</div>\r\n\t)\r\n}","import React, {Component, useEffect, useState} from \"react\";\r\nimport '../../App.css'\r\nimport RadioButton from \"../form/radiobutton\";\r\nimport CheckBox from \"../form/checkBox\";\r\nimport SelectBox from \"../form/SelectBox\";\r\nimport Scatter from \"../Charts/Scatter\";\r\nimport firebase from \"../../util/firebase\";\r\nimport FacebookShareBtn from \"../shareBtn/facebookShare\";\r\nimport app, {signInWithGoogle, signInAnonymously} from \"../../util/firebase\";\r\nimport ScatterLine from \"../axisAverrage/ScatterLineResult\";\r\nimport PrecentOfAnswered from \"../axisAverrage/PrecentOfAnswered\";\r\n\r\nlet distance = require('euclidean-distance')\r\n\r\n\r\nconst queryString = require('query-string')\r\n\r\nclass Home extends Component {\r\n\tstate = {\r\n\t\tquestions: [],\r\n\t\tmain_title: '',\r\n\t\tgateway: '',\r\n\t\tanswers: {},\r\n\t\tnotAnswered: [],\r\n\t\taxises: {},\r\n\t\taxis_points: [],\r\n\t\ttotal_axis: [],\r\n\t\taxis_title_values: [],\r\n\t\taxis_values: [],\r\n\t\tposition: {},\r\n\t\taxis: [],\r\n\t\taxis_title: [],\r\n\t\taxises_object: [],\r\n\t\taxis_names: {},\r\n\t\tall_axis: {},\r\n\t\tanswer_title_values: [],\r\n\t\tanswer_values: [\"da\"],\r\n\t\tanswer_values_males: [],\r\n\t\tcount_axises: [],\r\n\t\tcompass_compare: {},\r\n\t\tdefault_axises: [],\r\n\t\tall_axis_averrage: [],\r\n\t\tbatch_axises: [],\r\n\t\tonlyTwoCheckBox: true,\r\n\t\tshowAnswers: false,\r\n\t\tquestions_on_page: 0,\r\n\t\tfirst_questions: 0,\r\n\t\tpartyColor: [],\r\n\t\tanket: false,\r\n\t\tanket_all_answers: 1,\r\n\t\tanketa_questions: [],\r\n\t\tanket_answers: [],\r\n\t\taxis_legends: [],\r\n\t\tlegendary: [],\r\n\t\tnearestTeacher: {},\r\n\t\tcompass_url: \"\",\r\n\t\tsaveData: false,\r\n\t\tuid: false,\r\n\t\tuser: false,\r\n\t\taxisNearest: [],\r\n\t\tcurrentUser: {}\r\n\t}\r\n\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.downloadData()\r\n\t}\r\n\r\n\tdownloadData = () => {\r\n\t\tlet urlString = queryString.parse(window.location.search, {decode: false})\r\n\t\tconsole.log(urlString)\r\n\t\tif (true) {\r\n\t\t\t// fetch('https://raw.githubusercontent.com/Kabirov7/schoolCompass_json/main/config_schoolCompass_test.json')\r\n\t\t\tfetch('https://raw.githubusercontent.com/Kabirov7/schoolCompass_json/main/config_schoolCompass.json')\r\n\t\t\t\t// if (urlString.url) {\r\n\t\t\t\t// \tfetch(urlString.url)\r\n\t\t\t\t.then((response) => {\r\n\t\t\t\t\tconsole.log(\"RESPONSE\", response)\r\n\t\t\t\t\treturn response.json();\r\n\t\t\t\t})\r\n\t\t\t\t.then((data) => {\r\n\t\t\t\t\tconsole.log(\"DATA\", data);\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\tquestions: data.questions,\r\n\t\t\t\t\t\tmain_title: data.main_title,\r\n\t\t\t\t\t\tgateway: data.gateway,\r\n\t\t\t\t\t\tcompass_compare: data.compass_compare,\r\n\t\t\t\t\t\taxis: data.axises,\r\n\t\t\t\t\t\taxis_title: data.axis_title,\r\n\t\t\t\t\t\taxis_title_values: data.axis_title_values,\r\n\t\t\t\t\t\taxis_values: data.axis_values,\r\n\t\t\t\t\t\tanswer_title_values: data.answer_title_values,\r\n\t\t\t\t\t\tanswer_values_males: data.answer_values,\r\n\t\t\t\t\t\taxises_object: data.axises_object,\r\n\t\t\t\t\t\tquestions_on_page: data.questions_on_page,\r\n\t\t\t\t\t\taxis_points: data.axis_points,\r\n\t\t\t\t\t\tpartyColor: data.partyColor,\r\n\t\t\t\t\t\tanketa_questions: data.anket,\r\n\t\t\t\t\t\taxis_legends: data.axis_legends,\r\n\t\t\t\t\t\tcompass_url: data.compass_url,\r\n\t\t\t\t\t\taxisNearest: data.axisNearest,\r\n\t\t\t\t\t})\r\n\t\t\t\t});\r\n\t\t} else {\r\n\t\t\tconsole.log(\"ERROR: no url detected\")\r\n\t\t}\r\n\t}\r\n\r\n\tgetNotAnswered = (state, pl) => {\r\n\r\n\t\tfunction elToIntArr(array) {\r\n\t\t\tarray.forEach((i, index) => {\r\n\t\t\t\tarray[index] = Number(array[index])\r\n\t\t\t})\r\n\t\t\treturn array\r\n\t\t}\r\n\r\n\t\tlet currentQset;\r\n\t\tif (pl == \"plus\") {\r\n\t\t\tcurrentQset = this.state.questions.slice(this.state.first_questions, this.state.first_questions + this.state.questions_on_page);\r\n\t\t} else if (pl == 'minus') {\r\n\t\t\tcurrentQset = this.state.questions.slice(this.state.first_questions, this.state.first_questions - this.state.questions_on_page);\r\n\t\t}\r\n\r\n\r\n\t\tlet idxsOfAnswered = elToIntArr(Object.keys(state.answers))\r\n\t\tcurrentQset = elToIntArr(Object.keys(currentQset))\r\n\r\n\t\tlet whichNotAnswered = currentQset.filter((i) => idxsOfAnswered.indexOf(this.state.first_questions + i) == -1);\r\n\r\n\t\treturn whichNotAnswered\r\n\t}\r\n\r\n\treturnAnswer = (answer, index) => {\r\n\t\tlet answers = {...this.state.answers}\r\n\t\tanswers[index] = answer\r\n\t\tthis.setState({answers: answers})\r\n\t}\r\n\r\n\treturnAnketsAnswer = (answer, index) => {\r\n\t\tlet answers = {...this.state.anket_answers}\r\n\t\tanswers[index] = answer\r\n\t\tthis.setState({anket_answers: answers})\r\n\t}\r\n\r\n\treturnAxisName = (axis_name, index) => {\r\n\t\tlet axises = {...this.state.axis_names}\r\n\t\taxises[index] = axis_name\r\n\t\tthis.setState({axis_names: axises})\r\n\t}\r\n\r\n\tgetAxisMainTemplate = (state) => {\r\n\t\tlet mainTemplate;\r\n\t\tfor (let i = 0; i < state.axises_object.length + 1; i++) {\r\n\t\t\tmainTemplate = Object.assign({}, state.axises_object[i], state.axises_object[i + 1], mainTemplate)\r\n\t\t}\r\n\t\treturn mainTemplate;\r\n\t}\r\n\r\n\tgetAxisTemplate = (state) => {\r\n\t\tlet axis_names = [];\r\n\t\tlet axis, axis_index, axis_object;\r\n\t\tlet all_axis;\r\n\t\tlet template = Object.entries(state.axis_names).map((item) => {\r\n\t\t\taxis = item[1]\r\n\t\t\taxis_index = item[0]\r\n\t\t\taxis_object = state.axises_object[axis_index]\r\n\t\t\tif (axis) {\r\n\t\t\t\taxis_names.push(axis_object)\r\n\t\t\t\treturn axis_object\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\ttemplate = template.filter(item => item !== undefined)\r\n\t\ttemplate = template.reverse()\r\n\t\tfor (let i = 0; i < template.length + 1; i++) {\r\n\t\t\tif (i != template.length) {\r\n\t\t\t\tall_axis = Object.assign({}, template[i], template[i + 1], all_axis)\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn all_axis;\r\n\t\tthis.setState({all_axis: all_axis})\r\n\t}\r\n\r\n\treturnAxis = (axis) => {\r\n\t\tlet axises = {...this.state.axises}\r\n\t\taxises = axis\r\n\t\tthis.setState({axises: axises})\r\n\t}\r\n\r\n\tgetAxis = (state) => {\r\n\t\tlet state_answers = Object.entries(state.answers);\r\n\r\n\t\tlet axises_names = [];\r\n\t\tlet axis_count = {};\r\n\t\tlet answer, index_question;\r\n\r\n\t\tlet axs = state_answers.map((item, index, array) => {\r\n\t\t\tindex_question = item[0]\r\n\t\t\tanswer = item[1]\r\n\t\t\tlet answer_type = state.questions[index_question].answer;\r\n\t\t\tlet answer_type_index = state.answer_title_values.indexOf(answer_type)\r\n\t\t\tlet answers_item = state.answer_values_males[answer_type_index][state.anket_answers[0]]\r\n\t\t\tlet answer_index = answers_item.indexOf(answer)\r\n\r\n\t\t\tlet axis_type = state.questions[index_question].axis;\r\n\t\t\tlet axis_type_index = state.axis_title_values.indexOf(axis_type)\r\n\t\t\tlet axis_array = state.axis_values[axis_type_index]\r\n\t\t\tlet axis_is = axis_array[answer_index]\r\n\r\n\t\t\tObject.keys(axis_is).forEach((i) => {\r\n\t\t\t\taxises_names.push(i)\r\n\t\t\t})\r\n\r\n\t\t\treturn axis_is;\r\n\t\t})\r\n\t\taxises_names = axises_names.sort()\r\n\t\tlet unique_axis = [...new Set(axises_names)];\r\n\t\tunique_axis.forEach((item, index) => {\r\n\t\t\tlet difference = (axises_names.lastIndexOf(item) + 1) - axises_names.indexOf(item)\r\n\t\t\taxis_count[item] = difference\r\n\t\t})\r\n\r\n\t\tthis.returnAxis(axs);\r\n\t\tthis.getAxisAverage(axs, axis_count);\r\n\t};\r\n\r\n\tgetAxisAverage = (axs, axis_count) => {\r\n\t\tconst sum = this.getAxisTemplate(this.state)\r\n\t\tconst mainTemplate = this.getAxisMainTemplate(this.state)\r\n\r\n\t\tObject.values(axs).forEach(el => {\r\n\t\t\tObject.keys(el).forEach(key => {\r\n\r\n\t\t\t\tmainTemplate[key] += el[key]\r\n\t\t\t\tif (sum != undefined) {\r\n\t\t\t\t\tif (sum[key] !== undefined) {\r\n\t\t\t\t\t\tsum[key] += el[key]\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t})\r\n\r\n\r\n\t\tObject.keys(axis_count).forEach(key => {\r\n\t\t\tmainTemplate[key] = mainTemplate[key] / axis_count[key]\r\n\t\t})\r\n\r\n\t\tif (sum != undefined) {\r\n\t\t\tObject.keys(sum).forEach(key => {\r\n\t\t\t\tif (axis_count[key] !== undefined) {\r\n\t\t\t\t\tsum[key] = sum[key] / axis_count[key]\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tthis.setState({all_axis_averrage: Object.values(mainTemplate).reverse()})\r\n\t\tif (sum != undefined) {\r\n\t\t\tthis.distanceEuclid(sum)\r\n\t\t}\r\n\t}\r\n\r\n\tdistanceEuclid = (axises_object) => {\r\n\t\tlet distanceIs;\r\n\t\tlet minDistance = Infinity;\r\n\t\tlet axises = [];\r\n\t\tconst minDistances = [];\r\n\r\n\t\tlet positionInfo = {\r\n\t\t\tdistance: Infinity,\r\n\t\t\ttitle: Infinity,\r\n\t\t}\r\n\r\n\t\tlet axises_object_keys = Object.keys(axises_object);//keys of choosen axises\r\n\t\tlet axises_object_values = Object.values(axises_object);// values of choosen axises\r\n\t\tconst axises_idx = [];\r\n\r\n\r\n\t\tlet default_axises = [];\r\n\t\twhile (default_axises.length < this.state.compass_compare.axises.length) {\r\n\t\t\tdefault_axises.push([])\r\n\t\t}\r\n\r\n\t\taxises_object_keys.forEach((el, i) => {\r\n\t\t\taxises[i] = axises_object_values[i]\r\n\t\t\taxises_idx[i] = this.state.axis.indexOf(el)\r\n\t\t})\r\n\r\n\t\tthis.state.compass_compare.axises.map((item, item_index) => {\r\n\t\t\tlet default_axis = []\r\n\t\t\twhile (default_axis.length < axises_idx.length) {\r\n\t\t\t\tdefault_axis.push(0)\r\n\t\t\t}\r\n\t\t\taxises_idx.forEach((axis_idx, idx) => {\r\n\t\t\t\tdefault_axis[idx] = item[axis_idx]\r\n\t\t\t})\r\n\r\n\t\t\tdefault_axises[item_index] = default_axis\r\n\t\t})\r\n\r\n\t\tthis.setState({batch_axises: default_axises})\r\n\t\tthis.setState({total_axis: axises})\r\n\t\tif (axises.length != [0].length) {\r\n\t\t\tdefault_axises.forEach((item, index, array) => {\r\n\t\t\t\tdistanceIs = distance(axises, item);\r\n\t\t\t\tif (distanceIs < minDistance) {\r\n\t\t\t\t\tminDistance = distanceIs;\r\n\r\n\t\t\t\t\tpositionInfo = {\r\n\t\t\t\t\t\tdistance: minDistance,\r\n\t\t\t\t\t\ttitle: this.state.compass_compare.position[index],\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tthis.setState({position: positionInfo})\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\tlegendByAxis = () => {\r\n\t\tlet legendsByAxis = []\r\n\t\tlet legendIs = this.state.axis_legends.map((el, i) => {\r\n\t\t\tlet itIs;\r\n\r\n\t\t\tlet legends = Object.values(el)\r\n\t\t\tlet indexAxisByName = this.state.axis_title.indexOf(el.name)\r\n\t\t\tlet axis = this.state.all_axis_averrage[indexAxisByName]\r\n\t\t\tif (-2 <= axis && axis < -1.11) {\r\n\t\t\t\titIs = 1\r\n\r\n\t\t\t} else if (-1.10 < axis && axis < -0.61) {\r\n\t\t\t\titIs = 2\r\n\r\n\t\t\t} else if (-0.60 < axis && axis < -0.21) {\r\n\t\t\t\titIs = 3\r\n\r\n\t\t\t} else if (-0.20 < axis && axis < 0.20) {\r\n\t\t\t\titIs = 4\r\n\r\n\t\t\t} else if (0.21 < axis && axis < 0.60) {\r\n\t\t\t\titIs = 5\r\n\r\n\t\t\t} else if (-0.61 < axis && axis < 1.10) {\r\n\t\t\t\titIs = 6\r\n\r\n\t\t\t} else if (-1.11 < axis && axis <= 2.00) {\r\n\t\t\t\titIs = 7\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlegendsByAxis[i] = itIs\r\n\t\t\treturn (<div className={\"legend\"}>\r\n\t\t\t\t<h5>{el.name}:</h5>\r\n\t\t\t\t<p>{legends[itIs]}</p>\r\n\t\t\t</div>)\r\n\t\t})\r\n\r\n\t\tif (this.state.legendary.length == [].length) {\r\n\t\t\tthis.setState({legendary: legendsByAxis})\r\n\t\t}\r\n\t\treturn legendIs\r\n\t}\r\n\r\n\tsaving_data = (state) => {\r\n\t\tconst answ = state.answer_values_males[0][state.anket_answers[0]]\r\n\r\n\t\tlet answers = Object.values(state.answers).map((el, i) => {\r\n\t\t\tlet answerIdx = answ.indexOf(el)\r\n\t\t\treturn {[i]: answerIdx}\r\n\t\t})\r\n\r\n\t\tconst db = firebase.firestore().collection(\"users_answers\")\r\n\t\tlet uid;\r\n\t\tlet user = firebase.auth().currentUser\r\n\t\tconsole.log(user)\r\n\t\tif (this.state.saveData == false) {\r\n\r\n\t\t\tfirebase.auth().onAuthStateChanged(function (user) {\r\n\t\t\t\tif (user != null) {\r\n\t\t\t\t\tuid = user.uid\r\n\t\t\t\t\tdb.doc(uid).collection('answers').doc().set({\r\n\t\t\t\t\t\tmale: state.anket_answers[0],\r\n\t\t\t\t\t\tgrade: state.anket_answers[1],\r\n\t\t\t\t\t\tanswers: answers,\r\n\t\t\t\t\t\taxises_averrage: state.all_axis_averrage,\r\n\t\t\t\t\t\taxises: state.axises,\r\n\t\t\t\t\t}).then(console.log('save'))\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t});\r\n\t\t\tthis.setState({saveData: true})\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\trender() {\r\n\r\n\t\tlet anket = this.state.anketa_questions.map((el, i) => {\r\n\t\t\treturn <SelectBox key={i} index={i} title={el.title} answers={el.answer}\r\n\t\t\t\t\t\t\t\t\t\t\t\treturnAnketsAnswer={this.returnAnketsAnswer}/>\r\n\t\t})\r\n\r\n\t\tlet doneAnket = () => {\r\n\t\t\tif (Object.keys(this.state.anket_answers).length == this.state.anketa_questions.length) {\r\n\t\t\t\ttopFunction();\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tanket_all_answers: true,\r\n\t\t\t\t\tanket: true\r\n\t\t\t\t})\r\n\t\t\t} else {\r\n\t\t\t\tthis.setState({anket_all_answers: false})\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tlet qSet = this.state.questions.slice(this.state.first_questions, this.state.first_questions + this.state.questions_on_page)\r\n\t\tlet questionList = qSet.map((el, i) => {\r\n\t\t\tlet message;\r\n\t\t\tif (el.type === 'select') {\r\n\t\t\t\tif (this.state.notAnswered.indexOf(i) != -1) {\r\n\t\t\t\t\tmessage = 'Вам следует ответить на этот вопрос'\r\n\t\t\t\t} else {\r\n\t\t\t\t\tmessage = ''\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet type_answers = el.answer;\r\n\t\t\t\tlet title_values = this.state.answer_title_values;\r\n\t\t\t\tlet index_type = title_values.indexOf(type_answers);\r\n\t\t\t\tlet answer = this.state.answer_values_males[index_type][this.state.anket_answers[0]]\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<RadioButton ans={this.state.answers[this.state.first_questions + i]}\r\n\t\t\t\t\t\t\t\t\t\t\t key={this.state.first_questions + i} id={i} index={this.state.first_questions + i}\r\n\t\t\t\t\t\t\t\t\t\t\t title={el.title}\r\n\t\t\t\t\t\t\t\t\t\t\t message={message} answers={answer} returnAnswer={this.returnAnswer}/>\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t})\r\n\t\t\r\n\r\n\t\tlet axisAverrage = this.state.axis_title.map((el, i) => {\r\n\t\t\treturn (<ScatterLine index={i}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t axisName={el}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t names={this.state.compass_compare.position}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t partyAxises={this.state.compass_compare.axises}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t partyColor={this.state.partyColor}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t axisNearest={this.state.axisNearest[i]}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t axisAverrage={this.state.all_axis_averrage[i]}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t axisPoints={this.state.axis_points[i]}\r\n\t\t\t\t/>\r\n\t\t\t)\r\n\t\t})\r\n\r\n\t\tlet checkbox = this.state.axis.map((el, i) => {\r\n\t\t\treturn (\r\n\t\t\t\t<CheckBox key={i} index={i} name={el} title={this.state.axis_title[i]} returnAxisName={this.returnAxisName}/>\r\n\t\t\t)\r\n\r\n\t\t})\r\n\r\n\t\tlet chart = () => {\r\n\t\t\tif (this.state.axises != {}) {\r\n\t\t\t\tlet axisesNames = this.state.axis_names\r\n\r\n\t\t\t\tObject.keys(axisesNames).forEach(function (key) {\r\n\t\t\t\t\tif (axisesNames[key] == false)\r\n\t\t\t\t\t\tdelete axisesNames[key];\r\n\t\t\t\t});\r\n\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<Scatter partyColor={this.state.partyColor} myAxis={this.state.total_axis}\r\n\t\t\t\t\t\t\t\t\t\t\t names={this.state.compass_compare.position}\r\n\t\t\t\t\t\t\t\t\t\t\t axises={this.state.batch_axises}/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<p className={'scatter'}>Ось X — {this.state.axis_title[Object.keys(axisesNames)[0]]}</p>\r\n\t\t\t\t\t\t<p className={'scatter'}>Ось Y — {this.state.axis_title[Object.keys(axisesNames)[1]]}</p>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t)\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet resultTeacher = () => {\r\n\t\t\tlet distanceIs;\r\n\t\t\tlet names = this.state.compass_compare.position\r\n\t\t\tlet minIs = {\r\n\t\t\t\tidx: \"\",\r\n\t\t\t\tname: \"\",\r\n\t\t\t\tdistance: Infinity\r\n\t\t\t}\r\n\t\t\tthis.state.compass_compare.axises.map((el, i) => {\r\n\t\t\t\tdistanceIs = distance(this.state.all_axis_averrage, el)\r\n\t\t\t\tif (distanceIs < minIs.distance) {\r\n\t\t\t\t\tminIs.idx = i\r\n\t\t\t\t\tminIs.name = names[i]\r\n\t\t\t\t\tminIs.distance = distanceIs\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\tif (Object.values(this.state.nearestTeacher).length == Object.values({}).length) {\r\n\t\t\t\tthis.setState({nearestTeacher: minIs})\r\n\t\t\t}\r\n\t\t\treturn (<div>\r\n\t\t\t\t<div className={\"resultTeacher\"}>\r\n\t\t\t\t\t<h3>Ближайший вам учитель:</h3>\r\n\t\t\t\t\t<h3>«{minIs.name}»</h3>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div className={\"resultTeacher\"}>\r\n\t\t\t\t\t<h3>Ваш автопортрет на основе ответов:</h3>\r\n\t\t\t\t\t<div className={\"myLegends\"}>\r\n\t\t\t\t\t\t{this.legendByAxis()}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div className={\"facebookBtn\"}>\r\n\t\t\t\t\t<h4 style={{textAlign: \"center\"}}>Поделиться результатами в социальных сетях</h4>\r\n\t\t\t\t\t<FacebookShareBtn\r\n\t\t\t\t\t\tclassName={'fb'}\r\n\t\t\t\t\t\tlegends={this.state.axis_legends}\r\n\t\t\t\t\t\tindexLegends={this.state.legendary}\r\n\t\t\t\t\t\tcompass_url={this.state.compass_url}\r\n\t\t\t\t\t\tnearestTeacher={this.state.nearestTeacher.name}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t</div>)\r\n\t\t}\r\n\r\n\t\tlet topFunction = () => {\r\n\t\t\tdocument.body.scrollTop = 0;\r\n\t\t\tdocument.documentElement.scrollTop = 0;\r\n\t\t}\r\n\r\n\t\tlet nextAndScrollTop = () => {\r\n\t\t\tlet whichNotAnswered = this.getNotAnswered(this.state, \"plus\");\r\n\t\t\tif (whichNotAnswered.length == 0) {\r\n\t\t\t\tthis.getAxis(this.state)\r\n\t\t\t\tthis.setState({first_questions: this.state.first_questions + this.state.questions_on_page});\r\n\t\t\t\tthis.setState({notAnswered: []})\r\n\t\t\t\ttopFunction();\r\n\t\t\t} else {\r\n\t\t\t\tthis.setState({notAnswered: whichNotAnswered})\r\n\t\t\t\tconst el = document.getElementById(`${whichNotAnswered[0]}`)\r\n\t\t\t\tel.scrollIntoView({\r\n\t\t\t\t\tbehavior: \"smooth\",\r\n\t\t\t\t\tblock: \"start\"\r\n\t\t\t\t})\r\n\t\t\t}\r\n\r\n\t\t\tif (Object.values(this.state.answers).length == Object.values(this.state.questions).length && Object.values(this.state.answers).length != Object.values({}).length && this.state.all_axis_averrage != []) {\r\n\t\t\t\tthis.saving_data(this.state)\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tlet previousAndScrollTop = () => {\r\n\t\t\tlet whichNotAnswered = this.getNotAnswered(this.state, \"minus\");\r\n\r\n\t\t\tif (whichNotAnswered.length == 0) {\r\n\t\t\t\tthis.getAxis(this.state)\r\n\t\t\t\tthis.setState({first_questions: this.state.first_questions - this.state.questions_on_page});\r\n\t\t\t\tthis.setState({notAnswered: []})\r\n\t\t\t\ttopFunction();\r\n\t\t\t} else {\r\n\t\t\t\tthis.setState({notAnswered: whichNotAnswered})\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet onlyTwoCheckbox = () => {\r\n\t\t\tlet values = Object.values(this.state.axis_names)\r\n\t\t\tconst countTrue = values.filter(el => el == true)\r\n\t\t\tif (countTrue.length == 2) {\r\n\t\t\t\tthis.setState({onlyTwoCheckBox: true})\r\n\t\t\t\tthis.getAxis(this.state)\r\n\t\t\t} else {\r\n\t\t\t\tthis.setState({onlyTwoCheckBox: false})\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst forms = () => {\r\n\t\t\tif (this.state.anket == false) {\r\n\t\t\t\tlet answers = (this.state.anket_all_answers == false) ? \"Вам следует ответить на все вопросы\" : \"\"\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<div style={{textAlign: \"center\"}}>\r\n\t\t\t\t\t\t<p className={\"chooseAnswer padding_margin\"}>{answers}</p>\r\n\t\t\t\t\t\t{anket}\r\n\t\t\t\t\t\t<div className={\"buttons\"}>\r\n\t\t\t\t\t\t\t<button onClick={() => doneAnket()}>Начать</button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)\r\n\t\t\t} else if (this.state.questions.length <= this.state.first_questions && this.state.anket == true) {\r\n\t\t\t\tlet result = this.state.onlyTwoCheckBox ? \"\" : \"Выберите только две темы\";\r\n\t\t\t\tlet d = (this.state.compass_compare.axises != undefined) ? resultTeacher() : \"\";\r\n\t\t\t\treturn (<div>\r\n\t\t\t\t\t{d}\r\n\t\t\t\t\t<h2 className=\"content-center full-result\">Развёрнутые результаты:</h2>\r\n\t\t\t\t\t{axisAverrage}\r\n\t\t\t\t\t<h1 className=\"content-center moreResult\">Поиграйтесь с результатами! Выведите их на график!</h1>\r\n\t\t\t\t\t<h2 className=\"content-center choose3axis\">Выберите два явления, которые вы хотите отобразить:</h2>\r\n\t\t\t\t\t<p className=\"chooseAnswer padding_margin\">{result}</p>\r\n\t\t\t\t\t<div className=\"choose_axises\">\r\n\t\t\t\t\t\t{checkbox}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div style={{textAlign: \"center\"}}>\r\n\t\t\t\t\t\t<button onClick={() => onlyTwoCheckbox()}>Показать результаты</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t{chart()}\r\n\t\t\t\t\t<div className={'result-position'}>\r\n\t\t\t\t\t\t<h3>Ближайший вам учитель по выбранным осям:</h3>\r\n\t\t\t\t\t\t<h2>{this.state.position.title}</h2>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>)\r\n\t\t\t} else {\r\n\t\t\t\tlet previousPageShowing = (this.state.first_questions == 0) ?\r\n\t\t\t\t\t<button style={{display: \"none\"}}>Предыдущая страница</button> :\r\n\t\t\t\t\t<button onClick={previousAndScrollTop}>Предыдущая страница</button>\r\n\t\t\t\treturn (<div>\r\n\t\t\t\t\t<PrecentOfAnswered lenQuestions={this.state.questions.length} currentQuestions={this.state.first_questions}/>\r\n\t\t\t\t\t{questionList}\r\n\t\t\t\t\t<div className=\"pagination\">\r\n\t\t\t\t\t\t{previousPageShowing}\r\n\t\t\t\t\t\t<button onClick={nextAndScrollTop}>Следующая страница</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"App\">\r\n\t\t\t\t<button onClick={() => console.log(this.state)}>show state</button>\r\n\t\t\t\t<button onClick={() => console.log(firebase.auth().signOut())}>signout</button>\r\n\t\t\t\t{forms()}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n\r\nexport default Home;\r\n","import React, { useEffect } from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\troot: {\r\n\t\t'& > *': {\r\n\t\t\twidth: '40ch',\r\n\t\t},\r\n\t},\r\n\r\n}));\r\n\r\n\r\nfunction BasicTextFields(props) {\r\n\tconst classes = useStyles();\r\n\tconst [value, setValue] = React.useState('');\r\n\r\n\tconst {index, response} = props\r\n\r\n\tuseEffect(() => {\r\n\t\tif (response) {\r\n\t\t\tsetValue(response)\r\n\t\t}\r\n\t}, [response])\r\n\r\n\tconst handleChange = (event) => {\r\n\t\tsetValue(event.target.value)\r\n\t\tprops.returnAnswer(event.target.value, index, event.target.value)\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<form noValidate autoComplete=\"off\">\r\n\t\t\t\t<h4>{props.title}</h4>\r\n\t\t\t\t<TextField\r\n\t\t\t\t\tclassName={classes.root}\r\n\t\t\t\t\tid={\"inputBox\" + index}\r\n\t\t\t\t\tlabel=\"Мой id\"\r\n\t\t\t\t\tvalue={value}\r\n\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t/>\r\n\t\t\t</form>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default BasicTextFields","import React, {Component, useEffect, useState} from \"react\";\r\nimport '../../App.css'\r\nimport CheckBox from \"../form/checkBox\";\r\nimport Scatter from \"../Charts/Scatter\";\r\nimport firebase from \"../../util/firebase\";\r\nimport FacebookShareBtn from \"../shareBtn/facebookShare\";\r\nimport ScatterLine from \"../axisAverrage/ScatterLineResult\";\r\nimport BasicTextFields from \"../form/TextField\";\r\n\r\nlet distance = require('euclidean-distance')\r\n\r\n\r\nconst queryString = require('query-string')\r\n\r\nclass Result extends Component {\r\n\tstate = {\r\n\t\tquestions: [],\r\n\t\tmain_title: '',\r\n\t\tgateway: '',\r\n\t\tanswers: [],\r\n\t\tnotAnswered: [],\r\n\t\taxises: {},\r\n\t\taxis_points: [],\r\n\t\ttotal_axis: [],\r\n\t\taxis_title_values: [],\r\n\t\tposition: {},\r\n\t\taxis: [],\r\n\t\taxis_title: [],\r\n\t\taxis_names: {},\r\n\t\tall_axis: {},\r\n\t\tanswer_title_values: [],\r\n\t\tanswer_values: [\"da\"],\r\n\t\tanswer_values_males: [],\r\n\t\tcount_axises: [],\r\n\t\tcompass_compare: {},\r\n\t\tdefault_axises: [],\r\n\t\tall_axis_averrage: [],\r\n\t\tbatch_axises: [],\r\n\t\tonlyTwoCheckBox: true,\r\n\t\tshowAnswers: false,\r\n\t\tpartyColor: [],\r\n\t\tanket: false,\r\n\t\tanket_all_answers: 1,\r\n\t\tanket_answers: [],\r\n\t\taxis_legends: [],\r\n\t\tlegendary: [],\r\n\t\tnearestParty: {},\r\n\t\tcompass_url: \"\",\r\n\t\taxisNearest: [],\r\n\t\tuserUid: '',\r\n\t\ttrueUid: false\r\n\r\n\t}\r\n\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.downloadData()\r\n\t}\r\n\r\n\tdownloadData = () => {\r\n\t\tlet urlString = queryString.parse(window.location.search, {decode: false})\r\n\t\tconsole.log(urlString)\r\n\t\tif (true) {\r\n\t\t\tfetch('https://raw.githubusercontent.com/Kabirov7/schoolCompass_json/main/config_schoolCompass_test.json')\r\n\t\t\t\t// fetch('https://raw.githubusercontent.com/Kabirov7/schoolCompass_json/main/config_schoolCompass.json')\r\n\t\t\t\t// if (urlString.url) {\r\n\t\t\t\t// \tfetch(urlString.url)\r\n\t\t\t\t.then((response) => {\r\n\t\t\t\t\tconsole.log(\"RESPONSE\", response)\r\n\t\t\t\t\treturn response.json();\r\n\t\t\t\t})\r\n\t\t\t\t.then((data) => {\r\n\t\t\t\t\tconsole.log(\"DATA\", data);\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\tmain_title: data.main_title,\r\n\t\t\t\t\t\tgateway: data.gateway,\r\n\t\t\t\t\t\tcompass_compare: data.compass_compare,\r\n\t\t\t\t\t\taxis: data.axises,\r\n\t\t\t\t\t\taxis_title: data.axis_title,\r\n\t\t\t\t\t\taxis_title_values: data.axis_title_values,\r\n\t\t\t\t\t\tanswer_title_values: data.answer_title_values,\r\n\t\t\t\t\t\tanswer_values_males: data.answer_values,\r\n\t\t\t\t\t\taxis_points: data.axis_points,\r\n\t\t\t\t\t\tpartyColor: data.partyColor,\r\n\t\t\t\t\t\taxis_legends: data.axis_legends,\r\n\t\t\t\t\t\tcompass_url: data.compass_url,\r\n\t\t\t\t\t\taxisNearest: data.axisNearest,\r\n\t\t\t\t\t})\r\n\t\t\t\t});\r\n\t\t} else {\r\n\t\t\tconsole.log(\"ERROR: no url detected\")\r\n\t\t}\r\n\t}\r\n\r\n\treturnAnswer = (answer, index) => {\r\n\t\tthis.setState({userUid: answer})\r\n\t}\r\n\r\n\tget_data = (state) => {\r\n\t\tconst uid = state.userUid\r\n\t\tconst answers = []\r\n\t\tlet db = firebase.firestore()\r\n\t\tlet rootRef = db.collection('users_answers')\r\n\t\trootRef.doc(uid).collection('answers').get()\r\n    .then(function(querySnapshot) {\r\n        querySnapshot.forEach(function(doc) {\r\n            answers.push(doc.data())\r\n        });\r\n        console.log(answers)\r\n    })\r\n\t\tthis.setState({answers:answers})\r\n\t}\r\n\r\n\treturnAxisName = (axis_name, index) => {\r\n\t\tlet axises = {...this.state.axis_names}\r\n\t\taxises[index] = axis_name\r\n\t\tthis.setState({axis_names: axises})\r\n\t}\r\n\r\n\tgetAxisMainTemplate = (state) => {\r\n\t\tlet mainTemplate;\r\n\t\tfor (let i = 0; i < state.axises_object.length + 1; i++) {\r\n\t\t\tmainTemplate = Object.assign({}, state.axises_object[i], state.axises_object[i + 1], mainTemplate)\r\n\t\t}\r\n\t\treturn mainTemplate;\r\n\t}\r\n\r\n\t\tgetAxisTemplate = (state) => {\r\n\t\tlet axis_names = [];\r\n\t\tlet axis, axis_index, axis_object;\r\n\t\tlet all_axis;\r\n\t\tlet template = Object.entries(state.axis_names).map((item) => {\r\n\t\t\taxis = item[1]\r\n\t\t\taxis_index = item[0]\r\n\t\t\taxis_object = state.axises_object[axis_index]\r\n\t\t\tif (axis) {\r\n\t\t\t\taxis_names.push(axis_object)\r\n\t\t\t\treturn axis_object\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\ttemplate = template.filter(item => item !== undefined)\r\n\t\ttemplate = template.reverse()\r\n\t\tfor (let i = 0; i < template.length + 1; i++) {\r\n\t\t\tif (i != template.length) {\r\n\t\t\t\tall_axis = Object.assign({}, template[i], template[i + 1], all_axis)\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn all_axis;\r\n\t\tthis.setState({all_axis: all_axis})\r\n\t}\r\n\r\n\t\tgetAxis = (state) => {\r\n\t\tlet state_answers = Object.entries(state.answers);\r\n\r\n\t\tlet axises_names = [];\r\n\t\tlet axis_count = {};\r\n\t\tlet answer, index_question;\r\n\r\n\t\tlet axs = state_answers.map((item, index, array) => {\r\n\t\t\tindex_question = item[0]\r\n\t\t\tanswer = item[1]\r\n\t\t\tlet answer_type = state.questions[index_question].answer;\r\n\t\t\tlet answer_type_index = state.answer_title_values.indexOf(answer_type)\r\n\t\t\tlet answers_item = state.answer_values_males[answer_type_index][state.anket_answers[0]]\r\n\t\t\tlet answer_index = answers_item.indexOf(answer)\r\n\r\n\t\t\tlet axis_type = state.questions[index_question].axis;\r\n\t\t\tlet axis_type_index = state.axis_title_values.indexOf(axis_type)\r\n\t\t\tlet axis_array = state.axis_values[axis_type_index]\r\n\t\t\tlet axis_is = axis_array[answer_index]\r\n\r\n\t\t\tObject.keys(axis_is).forEach((i) => {\r\n\t\t\t\taxises_names.push(i)\r\n\t\t\t})\r\n\r\n\t\t\treturn axis_is;\r\n\t\t})\r\n\t\taxises_names = axises_names.sort()\r\n\t\tlet unique_axis = [...new Set(axises_names)];\r\n\t\tunique_axis.forEach((item, index) => {\r\n\t\t\tlet difference = (axises_names.lastIndexOf(item) + 1) - axises_names.indexOf(item)\r\n\t\t\taxis_count[item] = difference\r\n\t\t})\r\n\r\n\t\tthis.returnAxis(axs);\r\n\t\tthis.getAxisAverage(axs, axis_count);\r\n\t};\r\n\r\n\t\tgetAxisAverage = (axs, axis_count) => {\r\n\t\tconst sum = this.getAxisTemplate(this.state)\r\n\t\tconst mainTemplate = this.getAxisMainTemplate(this.state)\r\n\r\n\t\tObject.values(axs).forEach(el => {\r\n\t\t\tObject.keys(el).forEach(key => {\r\n\r\n\t\t\t\tmainTemplate[key] += el[key]\r\n\t\t\t\tif (sum != undefined) {\r\n\t\t\t\t\tif (sum[key] !== undefined) {\r\n\t\t\t\t\t\tsum[key] += el[key]\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t})\r\n\r\n\r\n\t\tObject.keys(axis_count).forEach(key => {\r\n\t\t\tmainTemplate[key] = mainTemplate[key] / axis_count[key]\r\n\t\t})\r\n\r\n\t\tif (sum != undefined) {\r\n\t\t\tObject.keys(sum).forEach(key => {\r\n\t\t\t\tif (axis_count[key] !== undefined) {\r\n\t\t\t\t\tsum[key] = sum[key] / axis_count[key]\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tthis.setState({all_axis_averrage: Object.values(mainTemplate).reverse()})\r\n\t\tif (sum != undefined) {\r\n\t\t\tthis.distanceEuclid(sum)\r\n\t\t}\r\n\t}\r\n\r\n\t\tdistanceEuclid = (axises_object) => {\r\n\t\tlet distanceIs;\r\n\t\tlet minDistance = Infinity;\r\n\t\tlet axises = [];\r\n\t\tconst minDistances = [];\r\n\r\n\t\tlet positionInfo = {\r\n\t\t\tdistance: Infinity,\r\n\t\t\ttitle: Infinity,\r\n\t\t}\r\n\r\n\t\tlet axises_object_keys = Object.keys(axises_object);//keys of choosen axises\r\n\t\tlet axises_object_values = Object.values(axises_object);// values of choosen axises\r\n\t\tconst axises_idx = [];\r\n\r\n\r\n\t\tlet default_axises = [];\r\n\t\twhile (default_axises.length < this.state.compass_compare.axises.length) {\r\n\t\t\tdefault_axises.push([])\r\n\t\t}\r\n\r\n\t\taxises_object_keys.forEach((el, i) => {\r\n\t\t\taxises[i] = axises_object_values[i]\r\n\t\t\taxises_idx[i] = this.state.axis.indexOf(el)\r\n\t\t})\r\n\r\n\t\tthis.state.compass_compare.axises.map((item, item_index) => {\r\n\t\t\tlet default_axis = []\r\n\t\t\twhile (default_axis.length < axises_idx.length) {\r\n\t\t\t\tdefault_axis.push(0)\r\n\t\t\t}\r\n\t\t\taxises_idx.forEach((axis_idx, idx) => {\r\n\t\t\t\tdefault_axis[idx] = item[axis_idx]\r\n\t\t\t})\r\n\r\n\t\t\tdefault_axises[item_index] = default_axis\r\n\t\t})\r\n\r\n\t\tthis.setState({batch_axises: default_axises})\r\n\t\tthis.setState({total_axis: axises})\r\n\t\tif (axises.length != [0].length) {\r\n\t\t\tdefault_axises.forEach((item, index, array) => {\r\n\t\t\t\tdistanceIs = distance(axises, item);\r\n\t\t\t\tif (distanceIs < minDistance) {\r\n\t\t\t\t\tminDistance = distanceIs;\r\n\r\n\t\t\t\t\tpositionInfo = {\r\n\t\t\t\t\t\tdistance: minDistance,\r\n\t\t\t\t\t\ttitle: this.state.compass_compare.position[index],\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tthis.setState({position: positionInfo})\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\t\t\tlegendByAxis = () => {\r\n\t\tlet legendsByAxis = []\r\n\t\tlet legendIs = this.state.axis_legends.map((el, i) => {\r\n\t\t\tlet itIs;\r\n\r\n\t\t\tlet legends = Object.values(el)\r\n\t\t\tlet indexAxisByName = this.state.axis_title.indexOf(el.name)\r\n\t\t\tlet axis = this.state.all_axis_averrage[indexAxisByName]\r\n\t\t\tif (-2 <= axis && axis < -1.11) {\r\n\t\t\t\titIs = 1\r\n\r\n\t\t\t} else if (-1.10 < axis && axis < -0.61) {\r\n\t\t\t\titIs = 2\r\n\r\n\t\t\t} else if (-0.60 < axis && axis < -0.21) {\r\n\t\t\t\titIs = 3\r\n\r\n\t\t\t} else if (-0.20 < axis && axis < 0.20) {\r\n\t\t\t\titIs = 4\r\n\r\n\t\t\t} else if (0.21 < axis && axis < 0.60) {\r\n\t\t\t\titIs = 5\r\n\r\n\t\t\t} else if (-0.61 < axis && axis < 1.10) {\r\n\t\t\t\titIs = 6\r\n\r\n\t\t\t} else if (-1.11 < axis && axis <= 2.00) {\r\n\t\t\t\titIs = 7\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlegendsByAxis[i] = itIs\r\n\t\t\treturn (<div className={\"legend\"}>\r\n\t\t\t\t<h5>{el.name}:</h5>\r\n\t\t\t\t<p>{legends[itIs]}</p>\r\n\t\t\t</div>)\r\n\t\t})\r\n\r\n\t\tif (this.state.legendary.length == [].length) {\r\n\t\t\tthis.setState({legendary: legendsByAxis})\r\n\t\t}\r\n\t\treturn legendIs\r\n\t}\r\n\r\n\r\n\trender() {\r\n\r\n\t\tlet axisAverrage = this.state.axis_title.map((el, i) => {\r\n\t\t\treturn (<ScatterLine index={i}\r\n\t\t\t                     axisName={el}\r\n\t\t\t                     names={this.state.compass_compare.position}\r\n\t\t\t                     partyAxises={this.state.compass_compare.axises}\r\n\t\t\t                     partyColor={this.state.partyColor}\r\n\t\t\t                     axisNearest={this.state.axisNearest[i]}\r\n\t\t\t                     axisAverrage={this.state.all_axis_averrage[i]}\r\n\t\t\t                     axisPoints={this.state.axis_points[i]}\r\n\t\t\t\t/>\r\n\t\t\t)\r\n\t\t})\r\n\r\n\t\tlet checkbox = this.state.axis.map((el, i) => {\r\n\t\t\treturn (\r\n\t\t\t\t<CheckBox key={i} index={i} name={el} title={this.state.axis_title[i]} returnAxisName={this.returnAxisName}/>\r\n\t\t\t)\r\n\r\n\t\t})\r\n\r\n\t\tlet chart = () => {\r\n\t\t\tif (this.state.axises != {}) {\r\n\t\t\t\tlet axisesNames = this.state.axis_names\r\n\r\n\t\t\t\tObject.keys(axisesNames).forEach(function (key) {\r\n\t\t\t\t\tif (axisesNames[key] == false)\r\n\t\t\t\t\t\tdelete axisesNames[key];\r\n\t\t\t\t});\r\n\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<Scatter partyColor={this.state.partyColor} myAxis={this.state.total_axis}\r\n\t\t\t\t\t\t\t         names={this.state.compass_compare.position}\r\n\t\t\t\t\t\t\t         axises={this.state.batch_axises}/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<p className={'scatter'}>Ось X — {this.state.axis_title[Object.keys(axisesNames)[0]]}</p>\r\n\t\t\t\t\t\t<p className={'scatter'}>Ось Y — {this.state.axis_title[Object.keys(axisesNames)[1]]}</p>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t)\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet resultParty = () => {\r\n\t\t\tlet distanceIs;\r\n\t\t\tlet names = this.state.compass_compare.position\r\n\t\t\tlet minIs = {\r\n\t\t\t\tidx: \"\",\r\n\t\t\t\tname: \"\",\r\n\t\t\t\tdistance: Infinity\r\n\t\t\t}\r\n\t\t\tthis.state.compass_compare.axises.map((el, i) => {\r\n\t\t\t\tdistanceIs = distance(this.state.all_axis_averrage, el)\r\n\t\t\t\tif (distanceIs < minIs.distance) {\r\n\t\t\t\t\tminIs.idx = i\r\n\t\t\t\t\tminIs.name = names[i]\r\n\t\t\t\t\tminIs.distance = distanceIs\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\tif (Object.values(this.state.nearestParty).length == Object.values({}).length) {\r\n\t\t\t\tthis.setState({nearestParty: minIs})\r\n\t\t\t}\r\n\t\t\treturn (<div>\r\n\t\t\t\t<div className={\"resultParty\"}>\r\n\t\t\t\t\t<h3>Ближайший вам учитель:</h3>\r\n\t\t\t\t\t<h3>«{minIs.name}»</h3>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div className={\"resultParty\"}>\r\n\t\t\t\t\t<h3>Ваш автопортрет на основе ответов:</h3>\r\n\t\t\t\t\t<div className={\"myLegends\"}>\r\n\t\t\t\t\t\t{this.legendByAxis()}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div className={\"facebookBtn\"}>\r\n\t\t\t\t\t<h4 style={{textAlign: \"center\"}}>Поделиться результатами в социальных сетях</h4>\r\n\t\t\t\t\t<FacebookShareBtn\r\n\t\t\t\t\t\tclassName={'fb'}\r\n\t\t\t\t\t\tlegends={this.state.axis_legends}\r\n\t\t\t\t\t\tindexLegends={this.state.legendary}\r\n\t\t\t\t\t\tcompass_url={this.state.compass_url}\r\n\t\t\t\t\t\tnearestParty={this.state.nearestParty.name}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t</div>)\r\n\t\t}\r\n\r\n\t\tlet topFunction = () => {\r\n\t\t\tdocument.body.scrollTop = 0;\r\n\t\t\tdocument.documentElement.scrollTop = 0;\r\n\t\t}\r\n\r\n\t\tlet onlyTwoCheckbox = () => {\r\n\t\t\tlet values = Object.values(this.state.axis_names)\r\n\t\t\tconst countTrue = values.filter(el => el == true)\r\n\t\t\tif (countTrue.length == 2) {\r\n\t\t\t\tthis.setState({onlyTwoCheckBox: true})\r\n\t\t\t\tthis.getAxis(this.state)\r\n\t\t\t} else {\r\n\t\t\t\tthis.setState({onlyTwoCheckBox: false})\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst showResultPage = () => {\r\n\t\t\tthis.get_data(this.state)\r\n\t\t\tthis.setState({trueUid: true})\r\n\t\t}\r\n\r\n\t\tconst forms = () => {\r\n\t\t\tif (this.state.trueUid == false) {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<div style={{textAlign: \"center\"}}>\r\n\t\t\t\t\t\t<BasicTextFields title={\"Введите ваш ID для просмотра результатов\"} returnAnswer={this.returnAnswer}/>\r\n\t\t\t\t\t\t<button onClick={() => showResultPage()}>Show result</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)\r\n\t\t\t} else if (this.state.trueUid == true) {\r\n\r\n\t\t\t\tlet result = this.state.onlyTwoCheckBox ? \"\" : \"Выберите только две темы\";\r\n\t\t\t\tlet d = (this.state.compass_compare.axises != undefined) ? resultParty() : \"\";\r\n\t\t\t\treturn (<div>\r\n\t\t\t\t\t{d}\r\n\t\t\t\t\t<h2 className=\"content-center full-result\">Развёрнутые результаты:</h2>\r\n\t\t\t\t\t{axisAverrage}\r\n\t\t\t\t\t{/*<h1 className=\"content-center moreResult\">Поиграйтесь с результатами! Выведите их на график!</h1>*/}\r\n\t\t\t\t\t{/*<h2 className=\"content-center choose3axis\">Выберите два явления, которые вы хотите отобразить:</h2>*/}\r\n\t\t\t\t\t{/*<p className=\"chooseAnswer padding_margin\">{result}</p>*/}\r\n\t\t\t\t\t{/*<div className=\"choose_axises\">*/}\r\n\t\t\t\t\t{/*\t{checkbox}*/}\r\n\t\t\t\t\t{/*</div>*/}\r\n\t\t\t\t\t{/*<div style={{textAlign: \"center\"}}>*/}\r\n\t\t\t\t\t{/*\t<button onClick={() => onlyTwoCheckbox()}>Показать результаты</button>*/}\r\n\t\t\t\t\t{/*</div>*/}\r\n\t\t\t\t\t{/*{chart()}*/}\r\n\t\t\t\t\t{/*<div className={'result-position'}>*/}\r\n\t\t\t\t\t{/*\t<h3>Ближайший вам учитель по выбранным осям:</h3>*/}\r\n\t\t\t\t\t{/*\t<h2>{this.state.position.title}</h2>*/}\r\n\t\t\t\t\t{/*</div>*/}\r\n\t\t\t\t</div>)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"App\">\r\n\t\t\t\t<button onClick={() => console.log(this.state)}></button>\r\n\t\t\t\t{forms()}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n\r\nexport default Result;\r\n","import React, {useEffect, Component} from 'react';\r\nimport './App.css';\r\n\r\nimport {\r\n\tBrowserRouter as Router,\r\n\tRoute,\r\n} from \"react-router-dom\";\r\n\r\nimport Home from \"./Components/auth/Home\";\r\nimport Result from \"./Components/auth/Result\";\r\nimport ReactGa from \"react-ga\"\r\n\r\nfunction App(){\r\n\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t\t<Router>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<Route exact path={\"/school_compass/\"} component={Home}/>\r\n\t\t\t\t\t\t\t{/*<Route exact path={\"/school_compass/myRes\"} component={Result}/>*/}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</Router>\r\n\t\t\t</div>\r\n\t\t)\r\n\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}